{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Developer Toolkit\n\n## Overview\n\nThe Developer Toolkit is a comprehensive web application that provides advanced utility tools for developers, including cryptographic hashing (MD5, SHA-256, SHA-512, SHA-3), encryption/decryption algorithms, JSON/XML formatting and validation, file conversion (PDF to text, DOCX processing), multiple encoding/decoding formats (Base64, Base32, URL, HTML entities, JWT), QR code generation and scanning, duplicate data identification, and other data processing utilities. The application features a modern card-based interface and is built as a full-stack solution with a React frontend and Express backend, designed to handle both synchronous operations and asynchronous file processing tasks.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built using React with TypeScript and follows a component-based architecture:\n- **UI Framework**: Uses shadcn/ui components built on top of Radix UI primitives for consistent, accessible UI components\n- **Styling**: Tailwind CSS for utility-first styling with custom CSS variables for theming\n- **State Management**: React Query (@tanstack/react-query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\nThe server is built with Express.js and follows a RESTful API pattern:\n- **Framework**: Express.js with TypeScript for type safety\n- **File Processing**: Supports asynchronous file operations with job tracking for PDF and document conversion\n- **Request Handling**: Custom middleware for logging, JSON parsing, and error handling\n- **Storage Pattern**: Abstracted storage interface supporting both in-memory and database implementations\n- **Development Setup**: Hot reload with Vite middleware integration for seamless development\n\n### Data Storage Solutions\nThe application uses a flexible storage architecture:\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Connection**: Neon serverless PostgreSQL for cloud database hosting\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Caching Strategy**: In-memory caching for cryptocurrency rates with 5-minute expiration\n- **Job Tracking**: Database-backed job system for async file processing operations\n\n### Authentication and Authorization\nCurrently, the application operates without authentication mechanisms, focusing on utility functionality. The session infrastructure is prepared with connect-pg-simple for future implementation.\n\n### API Design Patterns\n- **RESTful Endpoints**: Standard HTTP methods for resource manipulation\n- **Async Job Pattern**: POST requests create jobs, GET requests check status for long-running operations\n- **Error Handling**: Centralized error middleware with structured error responses\n- **Response Caching**: Strategic caching for external API calls (cryptocurrency data)\n\n## External Dependencies\n\n### Third-Party Services\n- **CoinGecko API**: Cryptocurrency price data and conversion rates with optional API key support\n- **Neon Database**: Serverless PostgreSQL hosting platform\n\n### Key Libraries and Frameworks\n- **UI Components**: Radix UI primitives for accessible component foundation\n- **File Processing**: pdf-parse for PDF text extraction, mammoth for DOCX processing\n- **Validation**: Zod for runtime type validation and schema definition\n- **HTTP Client**: Native fetch API with custom request wrapper\n- **Development Tools**: tsx for TypeScript execution, esbuild for production builds\n\n### Build and Development Dependencies\n- **Bundling**: Vite for frontend, esbuild for backend production builds\n- **TypeScript**: Full TypeScript support across frontend, backend, and shared modules\n- **CSS Processing**: PostCSS with Tailwind CSS and autoprefixer\n- **File Uploads**: multer for handling multipart form data\n- **Code Quality**: ESM modules throughout the application stack","size_bytes":4151},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          dark: \"var(--primary-dark)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        error: \"var(--error)\",\n        surface: \"var(--surface)\",\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Fira Code\", \"Monaco\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n          },\n          to: {\n            opacity: \"1\",\n          },\n        },\n        \"fade-out\": {\n          from: {\n            opacity: \"1\",\n          },\n          to: {\n            opacity: \"0\",\n          },\n        },\n        \"slide-in-right\": {\n          from: {\n            transform: \"translateX(100%)\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n          },\n        },\n        \"slide-out-right\": {\n          from: {\n            transform: \"translateX(0)\",\n          },\n          to: {\n            transform: \"translateX(100%)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"fade-out\": \"fade-out 0.3s ease-in\",\n        \"slide-in-right\": \"slide-in-right 0.3s ease-out\",\n        \"slide-out-right\": \"slide-out-right 0.3s ease-in\",\n      },\n      boxShadow: {\n        \"xs\": \"var(--shadow-xs)\",\n        \"sm\": \"var(--shadow-sm)\",\n        \"md\": \"var(--shadow-md)\",\n        \"lg\": \"var(--shadow-lg)\",\n        \"xl\": \"var(--shadow-xl)\",\n        \"2xl\": \"var(--shadow-2xl)\",\n      },\n      spacing: {\n        \"18\": \"4.5rem\",\n        \"88\": \"22rem\",\n        \"112\": \"28rem\",\n        \"128\": \"32rem\",\n      },\n      minHeight: {\n        \"0\": \"0\",\n        \"1/4\": \"25vh\",\n        \"1/2\": \"50vh\",\n        \"3/4\": \"75vh\",\n        \"full\": \"100vh\",\n        \"screen\": \"100vh\",\n      },\n      maxHeight: {\n        \"0\": \"0\",\n        \"1/4\": \"25vh\",\n        \"1/2\": \"50vh\",\n        \"3/4\": \"75vh\",\n        \"full\": \"100vh\",\n        \"screen\": \"100vh\",\n      },\n      zIndex: {\n        \"60\": \"60\",\n        \"70\": \"70\",\n        \"80\": \"80\",\n        \"90\": \"90\",\n        \"100\": \"100\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4698},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { storage } from \"./storage\";\nimport { insertFileJobSchema } from \"@shared/schema\";\nimport mammoth from \"mammoth\";\nimport { z } from \"zod\";\n\n// Extend Request type to include file property from multer\ninterface MulterRequest extends Request {\n  file?: Express.Multer.File;\n}\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: \"uploads/\",\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Crypto conversion endpoint\n  app.get(\"/api/crypto/convert\", async (req, res) => {\n    try {\n      const { from, to, amount } = req.query;\n      \n      if (!from || !to || !amount) {\n        return res.status(400).json({ message: \"Missing required parameters: from, to, amount\" });\n      }\n\n      // Check cache first\n      const cachedRate = await storage.getCryptoRate(from as string, to as string);\n      const now = new Date();\n      const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);\n\n      let rate: number;\n      let marketData: any = null;\n\n      if (cachedRate && cachedRate.lastUpdated && cachedRate.lastUpdated > fiveMinutesAgo) {\n        rate = parseFloat(cachedRate.rate);\n        marketData = cachedRate.marketData;\n      } else {\n        // Fetch from CoinGecko API\n        const coinGeckoApiKey = process.env.COINGECKO_API_KEY || process.env.CRYPTO_API_KEY || \"\";\n        const headers: HeadersInit = {};\n        if (coinGeckoApiKey) {\n          headers['X-CG-Demo-API-Key'] = coinGeckoApiKey;\n        }\n\n        const response = await fetch(\n          `https://api.coingecko.com/api/v3/simple/price?ids=${from}&vs_currencies=${to}&include_market_cap=true&include_24hr_change=true&include_24hr_vol=true`,\n          { headers }\n        );\n\n        if (!response.ok) {\n          throw new Error(`CoinGecko API error: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        const fromLower = (from as string).toLowerCase();\n        const toLower = (to as string).toLowerCase();\n\n        if (!data[fromLower] || !data[fromLower][toLower]) {\n          return res.status(404).json({ message: \"Currency pair not found\" });\n        }\n\n        rate = data[fromLower][toLower];\n        marketData = {\n          marketCap: data[fromLower][`${toLower}_market_cap`],\n          change24h: data[fromLower][`${toLower}_24h_change`],\n          volume24h: data[fromLower][`${toLower}_24h_vol`],\n        };\n\n        // Cache the rate\n        await storage.upsertCryptoRate({\n          fromCurrency: from as string,\n          toCurrency: to as string,\n          rate: rate.toString(),\n          marketData,\n        });\n      }\n\n      const convertedAmount = parseFloat(amount as string) * rate;\n\n      res.json({\n        from,\n        to,\n        amount: parseFloat(amount as string),\n        rate,\n        convertedAmount,\n        marketData,\n        lastUpdated: cachedRate?.lastUpdated || now,\n      });\n\n    } catch (error) {\n      console.error(\"Crypto conversion error:\", error);\n      res.status(500).json({ message: \"Failed to convert crypto currency\" });\n    }\n  });\n\n  // PDF to text conversion\n  app.post(\"/api/convert/pdf-to-text\", upload.single(\"file\"), async (req: MulterRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const job = await storage.createFileJob({\n        filename: req.file.originalname,\n        fileType: \"pdf\",\n        conversionType: \"to_text\",\n        originalSize: req.file.size,\n      });\n\n      // Process the PDF using dynamic import to avoid initialization issues\n      const fileBuffer = await fs.readFile(req.file.path);\n      const pdfParse = (await import(\"pdf-parse\")).default;\n      const pdfData = await pdfParse(fileBuffer);\n\n      await storage.updateFileJob(job.id, {\n        status: \"completed\",\n        resultData: {\n          text: pdfData.text,\n          pages: pdfData.numpages,\n          info: pdfData.info,\n        },\n      });\n\n      // Clean up uploaded file\n      await fs.unlink(req.file.path);\n\n      res.json({\n        jobId: job.id,\n        text: pdfData.text,\n        pages: pdfData.numpages,\n        info: pdfData.info,\n      });\n\n    } catch (error) {\n      console.error(\"PDF conversion error:\", error);\n      res.status(500).json({ message: \"Failed to convert PDF to text\" });\n    }\n  });\n\n  // DOCX to text conversion\n  app.post(\"/api/convert/docx-to-text\", upload.single(\"file\"), async (req: MulterRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const job = await storage.createFileJob({\n        filename: req.file.originalname,\n        fileType: \"docx\",\n        conversionType: \"to_text\",\n        originalSize: req.file.size,\n      });\n\n      // Process the DOCX\n      const fileBuffer = await fs.readFile(req.file.path);\n      const result = await mammoth.extractRawText({ buffer: fileBuffer });\n\n      await storage.updateFileJob(job.id, {\n        status: \"completed\",\n        resultData: {\n          text: result.value,\n          messages: result.messages,\n        },\n      });\n\n      // Clean up uploaded file\n      await fs.unlink(req.file.path);\n\n      res.json({\n        jobId: job.id,\n        text: result.value,\n        messages: result.messages,\n      });\n\n    } catch (error) {\n      console.error(\"DOCX conversion error:\", error);\n      res.status(500).json({ message: \"Failed to convert DOCX to text\" });\n    }\n  });\n\n  // Get file conversion job status\n  app.get(\"/api/jobs/:jobId\", async (req, res) => {\n    try {\n      const job = await storage.getFileJob(req.params.jobId);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      console.error(\"Job status error:\", error);\n      res.status(500).json({ message: \"Failed to get job status\" });\n    }\n  });\n\n  // JSON validation endpoint\n  app.post(\"/api/validate/json\", async (req, res) => {\n    try {\n      const { content } = req.body;\n      \n      if (!content) {\n        return res.status(400).json({ message: \"No content provided\" });\n      }\n\n      // Parse JSON to validate\n      const parsed = JSON.parse(content);\n      \n      // Calculate statistics\n      const stats = {\n        size: Buffer.byteLength(content, 'utf8'),\n        lines: content.split('\\n').length,\n        objects: countObjects(parsed),\n        arrays: countArrays(parsed),\n      };\n\n      res.json({\n        valid: true,\n        formatted: JSON.stringify(parsed, null, 2),\n        minified: JSON.stringify(parsed),\n        stats,\n      });\n\n    } catch (error) {\n      res.status(400).json({\n        valid: false,\n        error: error instanceof Error ? error.message : \"Invalid JSON\",\n      });\n    }\n  });\n\n  // XML validation and formatting endpoint\n  app.post(\"/api/validate/xml\", async (req, res) => {\n    try {\n      const { content } = req.body;\n      \n      if (!content) {\n        return res.status(400).json({ message: \"No content provided\" });\n      }\n\n      // Basic XML validation (would use a proper XML parser in production)\n      if (!content.trim().startsWith('<') || !content.trim().endsWith('>')) {\n        throw new Error(\"Invalid XML structure\");\n      }\n\n      // Simple XML formatting (in production, use a proper XML formatter)\n      const formatted = formatXML(content);\n\n      res.json({\n        valid: true,\n        formatted,\n        minified: content.replace(/>\\s+</g, '><').trim(),\n      });\n\n    } catch (error) {\n      res.status(400).json({\n        valid: false,\n        error: error instanceof Error ? error.message : \"Invalid XML\",\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper functions\nfunction countObjects(obj: any): number {\n  if (typeof obj !== 'object' || obj === null) return 0;\n  if (Array.isArray(obj)) {\n    return obj.reduce((count: number, item: any) => count + countObjects(item), 0);\n  }\n  return 1 + Object.values(obj).reduce((count: number, value: any) => count + countObjects(value), 0);\n}\n\nfunction countArrays(obj: any): number {\n  if (typeof obj !== 'object' || obj === null) return 0;\n  if (Array.isArray(obj)) {\n    return 1 + obj.reduce((count: number, item: any) => count + countArrays(item), 0);\n  }\n  return Object.values(obj).reduce((count: number, value: any) => count + countArrays(value), 0);\n}\n\nfunction formatXML(xml: string): string {\n  let formatted = '';\n  let indent = 0;\n  const tab = '  ';\n  \n  xml.split(/>\\s*</).forEach((node, index) => {\n    if (index > 0) formatted += '>';\n    if (index < xml.split(/>\\s*</).length - 1) formatted += '<';\n    \n    if (node.match(/^\\/\\w/)) indent--;\n    formatted += '\\n' + tab.repeat(indent) + node;\n    if (node.match(/^<?\\w[^>]*[^\\/]$/)) indent++;\n  });\n  \n  return formatted.substring(1);\n}\n","size_bytes":9067},"server/storage.ts":{"content":"import { type FileJob, type InsertFileJob, type CryptoRate, type InsertCryptoRate } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // File job operations\n  createFileJob(job: InsertFileJob): Promise<FileJob>;\n  getFileJob(id: string): Promise<FileJob | undefined>;\n  updateFileJob(id: string, updates: Partial<FileJob>): Promise<FileJob | undefined>;\n  \n  // Crypto rate operations\n  getCryptoRate(fromCurrency: string, toCurrency: string): Promise<CryptoRate | undefined>;\n  upsertCryptoRate(rate: InsertCryptoRate): Promise<CryptoRate>;\n}\n\nexport class MemStorage implements IStorage {\n  private fileJobs: Map<string, FileJob>;\n  private cryptoRates: Map<string, CryptoRate>;\n\n  constructor() {\n    this.fileJobs = new Map();\n    this.cryptoRates = new Map();\n  }\n\n  async createFileJob(insertJob: InsertFileJob): Promise<FileJob> {\n    const id = randomUUID();\n    const job: FileJob = {\n      ...insertJob,\n      id,\n      status: \"pending\",\n      originalSize: insertJob.originalSize || 0,\n      resultData: null,\n      errorMessage: null,\n      createdAt: new Date(),\n      completedAt: null,\n    };\n    this.fileJobs.set(id, job);\n    return job;\n  }\n\n  async getFileJob(id: string): Promise<FileJob | undefined> {\n    return this.fileJobs.get(id);\n  }\n\n  async updateFileJob(id: string, updates: Partial<FileJob>): Promise<FileJob | undefined> {\n    const job = this.fileJobs.get(id);\n    if (!job) return undefined;\n    \n    const updatedJob = { ...job, ...updates };\n    if (updates.status === \"completed\" || updates.status === \"failed\") {\n      updatedJob.completedAt = new Date();\n    }\n    \n    this.fileJobs.set(id, updatedJob);\n    return updatedJob;\n  }\n\n  private getCryptoRateKey(fromCurrency: string, toCurrency: string): string {\n    return `${fromCurrency}-${toCurrency}`;\n  }\n\n  async getCryptoRate(fromCurrency: string, toCurrency: string): Promise<CryptoRate | undefined> {\n    return this.cryptoRates.get(this.getCryptoRateKey(fromCurrency, toCurrency));\n  }\n\n  async upsertCryptoRate(insertRate: InsertCryptoRate): Promise<CryptoRate> {\n    const key = this.getCryptoRateKey(insertRate.fromCurrency, insertRate.toCurrency);\n    const existingRate = this.cryptoRates.get(key);\n    \n    const rate: CryptoRate = {\n      id: existingRate?.id || randomUUID(),\n      ...insertRate,\n      marketData: insertRate.marketData || {},\n      lastUpdated: new Date(),\n    };\n    \n    this.cryptoRates.set(key, rate);\n    return rate;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2539},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, json, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// File conversion jobs table for tracking async operations\nexport const fileJobs = pgTable(\"file_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: text(\"filename\").notNull(),\n  fileType: text(\"file_type\").notNull(), // pdf, docx, etc.\n  conversionType: text(\"conversion_type\").notNull(), // to_text, to_images, etc.\n  status: text(\"status\").notNull().default(\"pending\"), // pending, processing, completed, failed\n  originalSize: integer(\"original_size\").default(0),\n  resultData: json(\"result_data\"), // Store conversion results\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const insertFileJobSchema = createInsertSchema(fileJobs).pick({\n  filename: true,\n  fileType: true,\n  conversionType: true,\n  originalSize: true,\n});\n\nexport type InsertFileJob = z.infer<typeof insertFileJobSchema>;\nexport type FileJob = typeof fileJobs.$inferSelect;\n\n// Crypto conversion rates cache\nexport const cryptoRates = pgTable(\"crypto_rates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromCurrency: text(\"from_currency\").notNull(),\n  toCurrency: text(\"to_currency\").notNull(),\n  rate: text(\"rate\").notNull(), // Store as string for precision\n  marketData: json(\"market_data\").default({}), // Additional market info\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const insertCryptoRateSchema = createInsertSchema(cryptoRates).pick({\n  fromCurrency: true,\n  toCurrency: true,\n  rate: true,\n  marketData: true,\n});\n\nexport type InsertCryptoRate = z.infer<typeof insertCryptoRateSchema>;\nexport type CryptoRate = typeof cryptoRates.$inferSelect;\n","size_bytes":1910},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@300;400;500&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(207.4, 84.1%, 46.1%);\n  --primary-dark: hsl(211.1, 84.8%, 42.5%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(216, 12.2%, 25.9%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(207.4, 84.1%, 46.1%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(207.4, 84.1%, 46.1%);\n  --success: hsl(142.1, 76.2%, 36.3%);\n  --warning: hsl(35.5, 91.7%, 62.7%);\n  --error: hsl(0, 84.2%, 60.2%);\n  --surface: hsl(0, 0%, 100%);\n  --chart-1: hsl(207.4, 84.1%, 46.1%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(207.4, 84.1%, 46.1%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(207.4, 84.1%, 46.1%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(207.4, 84.1%, 46.1%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', Monaco, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(207.4, 84.1%, 46.1% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(207.4, 84.1%, 46.1% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(207.4, 84.1%, 46.1% / 0.00), 0px 1px 2px -1px hsl(207.4, 84.1%, 46.1% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(207.4, 84.1%, 46.1% / 0.00), 0px 1px 2px -1px hsl(207.4, 84.1%, 46.1% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(207.4, 84.1%, 46.1% / 0.00), 0px 2px 4px -1px hsl(207.4, 84.1%, 46.1% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(207.4, 84.1%, 46.1% / 0.00), 0px 4px 6px -1px hsl(207.4, 84.1%, 46.1% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(207.4, 84.1%, 46.1% / 0.00), 0px 8px 10px -1px hsl(207.4, 84.1%, 46.1% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(207.4, 84.1%, 46.1% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(207.4, 84.1%, 53.5%);\n  --primary-dark: hsl(211.1, 84.8%, 49.8%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(207.4, 84.1%, 53.5%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(207.4, 84.1%, 53.5%);\n  --success: hsl(142.1, 76.2%, 36.3%);\n  --warning: hsl(35.5, 91.7%, 62.7%);\n  --error: hsl(0, 84.2%, 60.2%);\n  --surface: hsl(228, 9.8039%, 10%);\n  --chart-1: hsl(207.4, 84.1%, 53.5%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(207.4, 84.1%, 53.5%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(207.4, 84.1%, 53.5%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(207.4, 84.1%, 53.5%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', Monaco, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(207.4, 84.1%, 53.5% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(207.4, 84.1%, 53.5% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(207.4, 84.1%, 53.5% / 0.00), 0px 1px 2px -1px hsl(207.4, 84.1%, 53.5% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(207.4, 84.1%, 53.5% / 0.00), 0px 1px 2px -1px hsl(207.4, 84.1%, 53.5% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(207.4, 84.1%, 53.5% / 0.00), 0px 2px 4px -1px hsl(207.4, 84.1%, 53.5% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(207.4, 84.1%, 53.5% / 0.00), 0px 4px 6px -1px hsl(207.4, 84.1%, 53.5% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(207.4, 84.1%, 53.5% / 0.00), 0px 8px 10px -1px hsl(207.4, 84.1%, 53.5% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(207.4, 84.1%, 53.5% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom scrollbar for better UX */\n.scrollbar-hide {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;\n}\n\n/* Syntax highlighting for JSON/XML */\n.json-syntax .string { color: hsl(142.1, 76.2%, 36.3%); }\n.json-syntax .number { color: hsl(35.5, 91.7%, 62.7%); }\n.json-syntax .boolean { color: hsl(207.4, 84.1%, 46.1%); }\n.json-syntax .null { color: hsl(0, 84.2%, 60.2%); }\n.json-syntax .key { color: hsl(207.4, 84.1%, 46.1%); }\n\n.xml-syntax .tag { color: hsl(207.4, 84.1%, 46.1%); }\n.xml-syntax .attr-name { color: hsl(142.1, 76.2%, 36.3%); }\n.xml-syntax .attr-value { color: hsl(35.5, 91.7%, 62.7%); }\n.xml-syntax .text { color: hsl(210, 25%, 7.8431%); }\n\n/* Loading animations */\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Focus visible for better accessibility */\n.focus-visible:focus {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n/* File drop zone hover states */\n.drop-zone-hover {\n  border-color: var(--primary);\n  background-color: hsl(var(--primary) / 0.05);\n}\n\n/* Toast animations */\n@keyframes toast-slide-in {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes toast-slide-out {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n\n.toast-slide-in {\n  animation: toast-slide-in 0.3s ease-out;\n}\n\n.toast-slide-out {\n  animation: toast-slide-out 0.3s ease-in;\n}\n\n/* Tab active states */\n.tab-active {\n  border-bottom-color: var(--primary);\n  color: var(--primary);\n  background-color: var(--surface);\n}\n\n/* Progress bar */\n.progress-bar {\n  background: linear-gradient(90deg, var(--primary) 0%, var(--primary-dark) 100%);\n}\n\n/* Code formatting */\npre code {\n  font-family: var(--font-mono);\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n/* Button hover effects */\n.btn-primary:hover {\n  background-color: var(--primary-dark);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.12);\n}\n\n.btn-secondary:hover {\n  background-color: hsl(var(--secondary) / 0.9);\n}\n\n/* Card hover effects */\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n","size_bytes":7692},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/base64-pdf.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Upload, Download, Copy, Trash2, FileText, Lock, Unlock, CheckCircle, Eye, EyeOff } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Base64Pdf() {\n  const [pdfFile, setPdfFile] = useState<File | null>(null);\n  const [base64Output, setBase64Output] = useState(\"\");\n  const [base64Input, setBase64Input] = useState(\"\");\n  const [isBase64Valid, setIsBase64Valid] = useState<boolean | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const handlePdfFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== \"application/pdf\") {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please select a PDF file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      if (file.size > 50 * 1024 * 1024) { // 50MB\n        toast({\n          title: \"File Too Large\",\n          description: \"File size must be less than 50MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setPdfFile(file);\n    }\n  };\n\n  const encodePdfToBase64 = async () => {\n    if (!pdfFile) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select a PDF file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    \n    try {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        // Remove the data:application/pdf;base64, prefix\n        const base64Data = result.split(',')[1];\n        setBase64Output(base64Data);\n        setIsProcessing(false);\n        \n        toast({\n          title: \"Success\",\n          description: \"PDF encoded to Base64 successfully\",\n        });\n      };\n      \n      reader.onerror = () => {\n        setIsProcessing(false);\n        toast({\n          title: \"Encoding Failed\",\n          description: \"Could not read the PDF file\",\n          variant: \"destructive\",\n        });\n      };\n\n      reader.readAsDataURL(pdfFile);\n    } catch (error) {\n      setIsProcessing(false);\n      toast({\n        title: \"Encoding Failed\",\n        description: error instanceof Error ? error.message : \"Could not encode PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const decodeBase64ToPdf = () => {\n    if (!base64Input.trim()) {\n      toast({\n        title: \"Empty Input\",\n        description: \"Please enter Base64 data to decode\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Validate Base64 format\n      const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;\n      const cleanBase64 = base64Input.replace(/\\s/g, '');\n      \n      if (!base64Regex.test(cleanBase64)) {\n        throw new Error(\"Invalid Base64 format\");\n      }\n\n      // Check if it looks like PDF data (starts with PDF header when decoded)\n      const binaryString = atob(cleanBase64);\n      if (!binaryString.startsWith('%PDF')) {\n        toast({\n          title: \"Warning\",\n          description: \"This doesn't appear to be PDF data, but will proceed with conversion\",\n          variant: \"destructive\",\n        });\n      }\n\n      setIsBase64Valid(true);\n      \n      // Create preview URL\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      const blob = new Blob([bytes], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      setPreviewUrl(url);\n      \n      toast({\n        title: \"Valid Base64\",\n        description: \"Base64 data is valid and ready for preview/download\",\n      });\n\n    } catch (error) {\n      setIsBase64Valid(false);\n      setPreviewUrl(null);\n      toast({\n        title: \"Invalid Base64\",\n        description: \"The provided Base64 data is not valid\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadDecodedPdf = () => {\n    if (!base64Input.trim() || isBase64Valid === false) {\n      toast({\n        title: \"Invalid Data\",\n        description: \"Please provide valid Base64 data first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const cleanBase64 = base64Input.replace(/\\s/g, '');\n      const binaryString = atob(cleanBase64);\n      const bytes = new Uint8Array(binaryString.length);\n      \n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n\n      const blob = new Blob([bytes], { type: 'application/pdf' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'decoded-document.pdf';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Downloaded\",\n        description: \"PDF file has been downloaded successfully\",\n      });\n\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Could not decode Base64 to PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Content copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Copy\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadBase64Text = () => {\n    if (!base64Output) {\n      toast({\n        title: \"No Data\",\n        description: \"Please encode a PDF first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const blob = new Blob([base64Output], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${pdfFile?.name?.replace('.pdf', '') || 'encoded'}_base64.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const saveBase64Json = () => {\n    if (!base64Output) {\n      toast({\n        title: \"No Data\",\n        description: \"Please encode a PDF first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const jsonData = {\n      filename: pdfFile?.name || 'document.pdf',\n      filesize: pdfFile?.size || 0,\n      mimeType: 'application/pdf',\n      base64Data: base64Output,\n      encodedAt: new Date().toISOString(),\n    };\n\n    const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${pdfFile?.name?.replace('.pdf', '') || 'encoded'}_data.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const removePdf = () => {\n    setPdfFile(null);\n    setBase64Output(\"\");\n  };\n\n  const clearBase64Input = () => {\n    setBase64Input(\"\");\n    setIsBase64Valid(null);\n    setShowPreview(false);\n    if (previewUrl) {\n      URL.revokeObjectURL(previewUrl);\n      setPreviewUrl(null);\n    }\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  const formatBase64Length = (length: number) => {\n    return new Intl.NumberFormat('en-US').format(length);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <h2 className=\"text-2xl font-semibold text-gray-900\">Base64 PDF Encoder/Decoder</h2>\n        <p className=\"text-gray-600\">Convert PDF files to Base64 encoding and decode Base64 back to PDF files.</p>\n      </div>\n\n      <Tabs defaultValue=\"encode\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"encode\" className=\"flex items-center space-x-2\" data-testid=\"tab-encode-pdf\">\n            <Lock className=\"h-4 w-4\" />\n            <span>Encode PDF</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"decode\" className=\"flex items-center space-x-2\" data-testid=\"tab-decode-base64\">\n            <Unlock className=\"h-4 w-4\" />\n            <span>Decode Base64</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* PDF to Base64 Encoder */}\n        <TabsContent value=\"encode\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* File Upload */}\n            <div className=\"space-y-4\">\n              <Label className=\"text-sm font-medium text-gray-700\">PDF File Input</Label>\n              <div \n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors cursor-pointer\"\n                onClick={() => document.getElementById('pdf-base64-upload')?.click()}\n                data-testid=\"dropzone-pdf-base64\"\n              >\n                <FileText className=\"h-12 w-12 text-red-400 mx-auto mb-4\" />\n                <p className=\"text-lg text-gray-600 mb-2\">Drop PDF file here</p>\n                <p className=\"text-sm text-gray-500 mb-4\">or</p>\n                <Button variant=\"outline\" className=\"bg-primary hover:bg-primary-dark text-white\">\n                  Choose PDF File\n                </Button>\n                <p className=\"text-xs text-gray-500 mt-3\">Max file size: 50MB</p>\n              </div>\n\n              <input\n                id=\"pdf-base64-upload\"\n                type=\"file\"\n                accept=\".pdf\"\n                onChange={handlePdfFileSelect}\n                className=\"hidden\"\n                data-testid=\"input-pdf-base64-file\"\n              />\n\n              {/* File Info */}\n              {pdfFile && (\n                <Card className=\"bg-gray-50\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <FileText className=\"h-8 w-8 text-red-500\" />\n                        <div>\n                          <p className=\"font-medium text-gray-900\" data-testid=\"text-pdf-base64-filename\">\n                            {pdfFile.name}\n                          </p>\n                          <p className=\"text-sm text-gray-500\" data-testid=\"text-pdf-base64-filesize\">\n                            {formatBytes(pdfFile.size)}\n                          </p>\n                        </div>\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={removePdf}\n                        className=\"text-gray-400 hover:text-gray-600\"\n                        data-testid=\"button-remove-pdf\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              <Button \n                onClick={encodePdfToBase64}\n                disabled={!pdfFile || isProcessing}\n                className=\"w-full bg-primary hover:bg-primary-dark\"\n                data-testid=\"button-encode-pdf-to-base64\"\n              >\n                <Lock className=\"h-4 w-4 mr-2\" />\n                {isProcessing ? \"Encoding...\" : \"Encode to Base64\"}\n              </Button>\n            </div>\n\n            {/* Base64 Output */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">Base64 Output</Label>\n                <div className=\"flex items-center space-x-2\">\n                  {base64Output && (\n                    <span className=\"text-xs text-gray-500\" data-testid=\"text-base64-size\">\n                      Length: {formatBase64Length(base64Output.length)} chars\n                    </span>\n                  )}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => copyToClipboard(base64Output)}\n                    disabled={!base64Output}\n                    data-testid=\"button-copy-base64\"\n                  >\n                    <Copy className=\"h-3 w-3 mr-1\" />\n                    Copy\n                  </Button>\n                </div>\n              </div>\n              \n              <Textarea\n                value={base64Output}\n                readOnly\n                placeholder=\"Base64 encoded PDF will appear here...\"\n                className=\"h-80 font-mono text-xs bg-gray-50 resize-none\"\n                data-testid=\"textarea-base64-output\"\n              />\n              \n              <div className=\"flex space-x-2\">\n                <Button \n                  onClick={downloadBase64Text}\n                  disabled={!base64Output}\n                  variant=\"outline\"\n                  className=\"flex-1 border-success text-success hover:bg-success hover:text-white\"\n                  data-testid=\"button-download-base64-text\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download as Text\n                </Button>\n                <Button \n                  onClick={saveBase64Json}\n                  disabled={!base64Output}\n                  variant=\"outline\"\n                  className=\"flex-1 border-warning text-warning hover:bg-warning hover:text-white\"\n                  data-testid=\"button-save-base64-json\"\n                >\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Save as JSON\n                </Button>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Base64 to PDF Decoder */}\n        <TabsContent value=\"decode\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Base64 Input */}\n            <div className=\"space-y-4\">\n              <Label className=\"text-sm font-medium text-gray-700\">Base64 Input</Label>\n              <Textarea\n                value={base64Input}\n                onChange={(e) => setBase64Input(e.target.value)}\n                placeholder=\"Paste Base64 encoded PDF data here...\"\n                className=\"h-80 font-mono text-xs resize-none\"\n                data-testid=\"textarea-base64-input\"\n              />\n              \n              <div className=\"flex space-x-2\">\n                <Button \n                  onClick={decodeBase64ToPdf}\n                  disabled={!base64Input.trim()}\n                  className=\"flex-1 bg-primary hover:bg-primary-dark\"\n                  data-testid=\"button-decode-base64-to-pdf\"\n                >\n                  <Unlock className=\"h-4 w-4 mr-2\" />\n                  Validate & Prepare\n                </Button>\n                <Button \n                  onClick={clearBase64Input}\n                  variant=\"outline\"\n                  className=\"px-4 border-gray-300 hover:bg-gray-50\"\n                  data-testid=\"button-clear-base64-input\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Clear\n                </Button>\n              </div>\n\n              {/* Validation Status */}\n              {isBase64Valid === true && (\n                <Card className=\"bg-green-50 border-green-200\">\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-center text-success\">\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      <span className=\"text-sm font-medium\">Valid Base64 PDF detected</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n              \n              {isBase64Valid === false && (\n                <Card className=\"bg-red-50 border-red-200\">\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-center text-error\">\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      <span className=\"text-sm font-medium\">Invalid Base64 data</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* PDF Preview/Download */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">PDF Preview & Download</Label>\n                {previewUrl && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowPreview(!showPreview)}\n                    data-testid=\"button-toggle-preview\"\n                  >\n                    {showPreview ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n                    {showPreview ? \"Hide Preview\" : \"Show Preview\"}\n                  </Button>\n                )}\n              </div>\n              \n              <div className=\"border border-gray-300 rounded-lg bg-gray-50 h-80 overflow-hidden\">\n                {showPreview && previewUrl ? (\n                  <iframe\n                    src={previewUrl}\n                    className=\"w-full h-full\"\n                    title=\"PDF Preview\"\n                    data-testid=\"iframe-pdf-preview\"\n                  />\n                ) : (\n                  <div className=\"p-8 text-center h-full flex flex-col items-center justify-center\">\n                    <FileText className=\"h-16 w-16 text-gray-300 mb-4\" />\n                    {previewUrl ? (\n                      <>\n                        <p className=\"text-gray-500 mb-4\">PDF ready for preview</p>\n                        <p className=\"text-sm text-gray-400 mb-6\">Click \"Show Preview\" above to view the PDF</p>\n                      </>\n                    ) : (\n                      <>\n                        <p className=\"text-gray-500 mb-4\">No PDF to preview</p>\n                        <p className=\"text-sm text-gray-400 mb-6\">Validate Base64 data first to enable preview</p>\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={downloadDecodedPdf}\n                  disabled={!base64Input.trim() || isBase64Valid === false}\n                  className=\"flex-1 bg-primary hover:bg-primary-dark\"\n                  data-testid=\"button-download-decoded-pdf\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download PDF\n                </Button>\n                {previewUrl && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => window.open(previewUrl, '_blank')}\n                    data-testid=\"button-open-in-new-tab\"\n                  >\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    Open in New Tab\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* PDF Info */}\n          {isBase64Valid === true && base64Input && (\n            <Card className=\"bg-gray-50\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Base64 Information</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Data Size:</span>\n                    <span className=\"font-medium\" data-testid=\"text-decoded-pdf-size\">\n                      {formatBytes(Math.floor(base64Input.length * 0.75))}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Characters:</span>\n                    <span className=\"font-medium\" data-testid=\"text-base64-length\">\n                      {formatBase64Length(base64Input.length)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-500\">Format:</span>\n                    <span className=\"font-medium\">PDF Document</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":21166},"client/src/components/crypto-converter.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeftRight, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst CRYPTO_CURRENCIES = [\n  { value: \"bitcoin\", label: \"Bitcoin (BTC)\" },\n  { value: \"ethereum\", label: \"Ethereum (ETH)\" },\n  { value: \"cardano\", label: \"Cardano (ADA)\" },\n  { value: \"polkadot\", label: \"Polkadot (DOT)\" },\n];\n\nconst FIAT_CURRENCIES = [\n  { value: \"usd\", label: \"US Dollar (USD)\" },\n  { value: \"eur\", label: \"Euro (EUR)\" },\n  { value: \"gbp\", label: \"British Pound (GBP)\" },\n  { value: \"jpy\", label: \"Japanese Yen (JPY)\" },\n];\n\nexport default function CryptoConverter() {\n  const [fromCurrency, setFromCurrency] = useState(\"bitcoin\");\n  const [toCurrency, setToCurrency] = useState(\"usd\");\n  const [amount, setAmount] = useState(\"1\");\n  const [shouldFetch, setShouldFetch] = useState(false);\n  const { toast } = useToast();\n\n  const { data: conversionData, isLoading, error } = useQuery({\n    queryKey: [\"/api/crypto/convert\", fromCurrency, toCurrency, amount],\n    queryFn: async ({ queryKey }) => {\n      const [, , from, to, amt] = queryKey;\n      const response = await fetch(`/api/crypto/convert?from=${from}&to=${to}&amount=${amt}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to convert crypto currency\");\n      }\n      return response.json();\n    },\n    enabled: shouldFetch && !!fromCurrency && !!toCurrency && !!amount,\n  });\n\n  const handleConvert = () => {\n    if (!amount || parseFloat(amount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShouldFetch(true);\n  };\n\n  const formatNumber = (num: number, decimals: number = 2) => {\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals,\n    }).format(num);\n  };\n\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency.toUpperCase(),\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-semibold text-gray-900\">Cryptocurrency Converter</h2>\n        {conversionData && (\n          <div className=\"text-sm text-gray-500 flex items-center\">\n            <Clock className=\"h-4 w-4 mr-1\" />\n            Last updated: {new Date(conversionData.lastUpdated).toLocaleTimeString()}\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Input Section */}\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"from-currency\" className=\"text-sm font-medium text-gray-700\">\n              From Currency\n            </Label>\n            <Select value={fromCurrency} onValueChange={setFromCurrency}>\n              <SelectTrigger data-testid=\"select-from-currency\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {CRYPTO_CURRENCIES.map((currency) => (\n                  <SelectItem key={currency.value} value={currency.value}>\n                    {currency.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"amount\" className=\"text-sm font-medium text-gray-700\">\n              Amount\n            </Label>\n            <Input\n              id=\"amount\"\n              type=\"number\"\n              placeholder=\"Enter amount\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              data-testid=\"input-amount\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"to-currency\" className=\"text-sm font-medium text-gray-700\">\n              To Currency\n            </Label>\n            <Select value={toCurrency} onValueChange={setToCurrency}>\n              <SelectTrigger data-testid=\"select-to-currency\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {FIAT_CURRENCIES.map((currency) => (\n                  <SelectItem key={currency.value} value={currency.value}>\n                    {currency.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Button \n            onClick={handleConvert} \n            className=\"w-full bg-primary hover:bg-primary-dark\" \n            disabled={isLoading}\n            data-testid=\"button-convert\"\n          >\n            <ArrowLeftRight className=\"h-4 w-4 mr-2\" />\n            {isLoading ? \"Converting...\" : \"Convert\"}\n          </Button>\n        </div>\n\n        {/* Results Section */}\n        <Card className=\"bg-gray-50\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Conversion Result</h3>\n            \n            {error && (\n              <div className=\"text-center text-red-600\">\n                <p>Error: {error.message}</p>\n              </div>\n            )}\n            \n            {isLoading && (\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p className=\"text-gray-500\">Converting...</p>\n              </div>\n            )}\n            \n            {conversionData && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-converted-amount\">\n                    {formatCurrency(conversionData.convertedAmount, conversionData.to)}\n                  </div>\n                  <div className=\"text-gray-500 mt-2\">\n                    1 {conversionData.from.toUpperCase()} = {formatCurrency(conversionData.rate, conversionData.to)}\n                  </div>\n                </div>\n                \n                {conversionData.marketData && (\n                  <div className=\"border-t border-gray-200 pt-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-500\">24h Change:</span>\n                        <span className={`font-medium ml-1 ${\n                          conversionData.marketData.change24h >= 0 ? 'text-success' : 'text-error'\n                        }`}>\n                          {conversionData.marketData.change24h?.toFixed(2)}%\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Volume:</span>\n                        <span className=\"font-medium ml-1\">\n                          ${formatNumber(conversionData.marketData.volume24h / 1000000000, 1)}B\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Market Cap:</span>\n                        <span className=\"font-medium ml-1\">\n                          ${formatNumber(conversionData.marketData.marketCap / 1000000000, 0)}B\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Rank:</span>\n                        <span className=\"font-medium ml-1\">#1</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {!conversionData && !isLoading && !error && (\n              <div className=\"text-center text-gray-500\">\n                <p>Enter amount and click convert to see results</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8284},"client/src/components/decoders.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Copy, Unlock, Link, Code, Key, Type } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Decoders() {\n  const [urlInput, setUrlInput] = useState(\"https%3A%2F%2Fexample.com%2Fsearch%3Fq%3Dhello%20world%26category%3Dall\");\n  const [urlOutput, setUrlOutput] = useState(\"\");\n  const [htmlInput, setHtmlInput] = useState(\"&lt;div class=&quot;example&quot;&gt;Hello &amp; World&lt;/div&gt;\");\n  const [htmlOutput, setHtmlOutput] = useState(\"\");\n  const [jwtInput, setJwtInput] = useState(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\");\n  const [jwtHeader, setJwtHeader] = useState(\"\");\n  const [jwtPayload, setJwtPayload] = useState(\"\");\n  const [jwtSignature, setJwtSignature] = useState(\"\");\n  const [base64Input, setBase64Input] = useState(\"SGVsbG8gV29ybGQhIFRoaXMgaXMgYSBCYXNlNjQgZW5jb2RlZCBtZXNzYWdl\");\n  const [base64Output, setBase64Output] = useState(\"\");\n  const [base32Input, setBase32Input] = useState(\"JBSWY3DPFQQHO33SNRSCC5BRGQZC2MFZGY4A====\");\n  const [base32Output, setBase32Output] = useState(\"\");\n  \n  const { toast } = useToast();\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Content copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Copy\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const decodeURL = () => {\n    try {\n      const decoded = decodeURIComponent(urlInput);\n      setUrlOutput(decoded);\n      toast({\n        title: \"Success\",\n        description: \"URL decoded successfully\",\n      });\n    } catch (error) {\n      setUrlOutput(\"Error: Invalid URL encoding\");\n      toast({\n        title: \"Error\",\n        description: \"Invalid URL encoding\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const encodeURL = () => {\n    try {\n      const encoded = encodeURIComponent(urlOutput || urlInput);\n      setUrlInput(encoded);\n      toast({\n        title: \"Success\",\n        description: \"URL encoded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Could not encode URL\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const decodeHTML = () => {\n    try {\n      const parser = new DOMParser();\n      const decoded = htmlInput\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/&quot;/g, '\"')\n        .replace(/&#x27;/g, \"'\")\n        .replace(/&amp;/g, '&');\n      setHtmlOutput(decoded);\n      toast({\n        title: \"Success\",\n        description: \"HTML entities decoded successfully\",\n      });\n    } catch (error) {\n      setHtmlOutput(\"Error: Could not decode HTML entities\");\n      toast({\n        title: \"Error\",\n        description: \"Could not decode HTML entities\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const encodeHTML = () => {\n    try {\n      const encoded = (htmlOutput || htmlInput)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#x27;');\n      setHtmlInput(encoded);\n      toast({\n        title: \"Success\",\n        description: \"HTML entities encoded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Could not encode HTML entities\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const decodeJWT = () => {\n    try {\n      const parts = jwtInput.split('.');\n      if (parts.length !== 3) {\n        throw new Error(\"Invalid JWT format\");\n      }\n\n      // Decode header\n      const header = JSON.parse(atob(parts[0].replace(/-/g, '+').replace(/_/g, '/')));\n      setJwtHeader(JSON.stringify(header, null, 2));\n\n      // Decode payload\n      const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));\n      setJwtPayload(JSON.stringify(payload, null, 2));\n\n      // Set signature (cannot be decoded without secret)\n      setJwtSignature(parts[2]);\n\n      toast({\n        title: \"Success\",\n        description: \"JWT decoded successfully\",\n      });\n    } catch (error) {\n      setJwtHeader(\"Error: Invalid JWT\");\n      setJwtPayload(\"Error: Invalid JWT\");\n      setJwtSignature(\"Error: Invalid JWT\");\n      toast({\n        title: \"Error\",\n        description: \"Invalid JWT format\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const decodeBase64 = () => {\n    try {\n      const decoded = atob(base64Input);\n      setBase64Output(decoded);\n      toast({\n        title: \"Success\",\n        description: \"Base64 decoded successfully\",\n      });\n    } catch (error) {\n      setBase64Output(\"Error: Invalid Base64 encoding\");\n      toast({\n        title: \"Error\",\n        description: \"Invalid Base64 encoding\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const encodeBase64 = () => {\n    try {\n      const encoded = btoa(base64Output || base64Input);\n      setBase64Input(encoded);\n      toast({\n        title: \"Success\",\n        description: \"Base64 encoded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Could not encode to Base64\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const base32Alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n\n  const decodeBase32 = () => {\n    try {\n      // Simple Base32 decoder implementation\n      const input = base32Input.toUpperCase().replace(/=+$/, '');\n      let binary = '';\n      \n      for (let i = 0; i < input.length; i++) {\n        const val = base32Alphabet.indexOf(input[i]);\n        if (val === -1) throw new Error('Invalid Base32 character');\n        binary += val.toString(2).padStart(5, '0');\n      }\n      \n      let decoded = '';\n      for (let i = 0; i < binary.length; i += 8) {\n        const byte = binary.slice(i, i + 8);\n        if (byte.length === 8) {\n          decoded += String.fromCharCode(parseInt(byte, 2));\n        }\n      }\n      \n      setBase32Output(decoded);\n      toast({\n        title: \"Success\",\n        description: \"Base32 decoded successfully\",\n      });\n    } catch (error) {\n      setBase32Output(\"Error: Invalid Base32 encoding\");\n      toast({\n        title: \"Error\",\n        description: \"Invalid Base32 encoding\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const encodeBase32 = () => {\n    try {\n      // Simple Base32 encoder implementation\n      const input = base32Output || base32Input;\n      let binary = '';\n      \n      for (let i = 0; i < input.length; i++) {\n        binary += input.charCodeAt(i).toString(2).padStart(8, '0');\n      }\n      \n      let encoded = '';\n      for (let i = 0; i < binary.length; i += 5) {\n        const chunk = binary.slice(i, i + 5).padEnd(5, '0');\n        encoded += base32Alphabet[parseInt(chunk, 2)];\n      }\n      \n      // Add padding\n      while (encoded.length % 8 !== 0) {\n        encoded += '=';\n      }\n      \n      setBase32Input(encoded);\n      toast({\n        title: \"Success\",\n        description: \"Base32 encoded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Could not encode to Base32\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-semibold text-gray-900\">Multiple Decoders</h2>\n\n      <Tabs defaultValue=\"url\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"url\" className=\"flex items-center space-x-2\" data-testid=\"tab-url-decoder\">\n            <Link className=\"h-4 w-4\" />\n            <span>URL</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"html\" className=\"flex items-center space-x-2\" data-testid=\"tab-html-decoder\">\n            <Code className=\"h-4 w-4\" />\n            <span>HTML</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"jwt\" className=\"flex items-center space-x-2\" data-testid=\"tab-jwt-decoder\">\n            <Key className=\"h-4 w-4\" />\n            <span>JWT</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"base64\" className=\"flex items-center space-x-2\" data-testid=\"tab-base64-decoder\">\n            <Type className=\"h-4 w-4\" />\n            <span>Base64</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"base32\" className=\"flex items-center space-x-2\" data-testid=\"tab-base32-decoder\">\n            <Type className=\"h-4 w-4\" />\n            <span>Base32</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* URL Decoder */}\n        <TabsContent value=\"url\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <Label className=\"text-sm font-medium text-gray-700\">Encoded URL</Label>\n              <Textarea\n                value={urlInput}\n                onChange={(e) => setUrlInput(e.target.value)}\n                placeholder=\"Paste encoded URL here...\"\n                className=\"h-32 font-mono text-sm\"\n                data-testid=\"textarea-url-input\"\n              />\n              <Button \n                onClick={decodeURL}\n                className=\"w-full bg-primary hover:bg-primary-dark\"\n                data-testid=\"button-decode-url\"\n              >\n                <Unlock className=\"h-4 w-4 mr-2\" />\n                Decode URL\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">Decoded URL</Label>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => copyToClipboard(urlOutput)}\n                  disabled={!urlOutput}\n                  data-testid=\"button-copy-decoded-url\"\n                >\n                  <Copy className=\"h-3 w-3 mr-1\" />\n                  Copy\n                </Button>\n              </div>\n              <div className=\"w-full h-32 p-4 font-mono text-sm border border-gray-300 rounded-lg bg-gray-50 overflow-auto\">\n                <div data-testid=\"text-url-output\">{urlOutput || \"Decoded URL will appear here...\"}</div>\n              </div>\n              <Button \n                onClick={encodeURL}\n                variant=\"outline\"\n                className=\"w-full border-secondary text-secondary hover:bg-secondary hover:text-white\"\n                data-testid=\"button-encode-url\"\n              >\n                <i className=\"fas fa-lock mr-2\"></i>\n                Encode URL\n              </Button>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* HTML Entities Decoder */}\n        <TabsContent value=\"html\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <Label className=\"text-sm font-medium text-gray-700\">HTML Entities</Label>\n              <Textarea\n                value={htmlInput}\n                onChange={(e) => setHtmlInput(e.target.value)}\n                placeholder=\"Paste HTML entities here...\"\n                className=\"h-32 font-mono text-sm\"\n                data-testid=\"textarea-html-input\"\n              />\n              <Button \n                onClick={decodeHTML}\n                className=\"w-full bg-primary hover:bg-primary-dark\"\n                data-testid=\"button-decode-html\"\n              >\n                <Unlock className=\"h-4 w-4 mr-2\" />\n                Decode HTML\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">Decoded HTML</Label>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => copyToClipboard(htmlOutput)}\n                  disabled={!htmlOutput}\n                  data-testid=\"button-copy-decoded-html\"\n                >\n                  <Copy className=\"h-3 w-3 mr-1\" />\n                  Copy\n                </Button>\n              </div>\n              <div className=\"w-full h-32 p-4 font-mono text-sm border border-gray-300 rounded-lg bg-gray-50 overflow-auto\">\n                <div data-testid=\"text-html-output\">{htmlOutput || \"Decoded HTML will appear here...\"}</div>\n              </div>\n              <Button \n                onClick={encodeHTML}\n                variant=\"outline\"\n                className=\"w-full border-secondary text-secondary hover:bg-secondary hover:text-white\"\n                data-testid=\"button-encode-html\"\n              >\n                <i className=\"fas fa-lock mr-2\"></i>\n                Encode HTML\n              </Button>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* JWT Decoder */}\n        <TabsContent value=\"jwt\" className=\"space-y-6\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2\">JWT Token</Label>\n            <Textarea\n              value={jwtInput}\n              onChange={(e) => setJwtInput(e.target.value)}\n              placeholder=\"Paste JWT token here...\"\n              className=\"h-24 font-mono text-sm\"\n              data-testid=\"textarea-jwt-input\"\n            />\n            <Button \n              onClick={decodeJWT}\n              className=\"mt-2 bg-primary hover:bg-primary-dark\"\n              data-testid=\"button-decode-jwt\"\n            >\n              <Unlock className=\"h-4 w-4 mr-2\" />\n              Decode JWT\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n            {/* Header */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium text-gray-700\">Header</Label>\n              <pre className=\"p-4 bg-red-50 border border-red-200 rounded-lg font-mono text-sm h-48 overflow-auto\">\n                <code data-testid=\"text-jwt-header\">{jwtHeader || \"JWT header will appear here...\"}</code>\n              </pre>\n            </div>\n\n            {/* Payload */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium text-gray-700\">Payload</Label>\n              <pre className=\"p-4 bg-purple-50 border border-purple-200 rounded-lg font-mono text-sm h-48 overflow-auto\">\n                <code data-testid=\"text-jwt-payload\">{jwtPayload || \"JWT payload will appear here...\"}</code>\n              </pre>\n            </div>\n\n            {/* Signature */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium text-gray-700\">Signature</Label>\n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg h-48 overflow-auto\">\n                <p className=\"font-mono text-sm break-all\" data-testid=\"text-jwt-signature\">\n                  {jwtSignature || \"JWT signature will appear here...\"}\n                </p>\n                <p className=\"text-xs text-gray-500 mt-2\">Signature verification requires secret key</p>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Base64 Decoder */}\n        <TabsContent value=\"base64\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <Label className=\"text-sm font-medium text-gray-700\">Base64 Input</Label>\n              <Textarea\n                value={base64Input}\n                onChange={(e) => setBase64Input(e.target.value)}\n                placeholder=\"Paste Base64 encoded text here...\"\n                className=\"h-32 font-mono text-sm\"\n                data-testid=\"textarea-base64-input\"\n              />\n              <Button \n                onClick={decodeBase64}\n                className=\"w-full bg-primary hover:bg-primary-dark\"\n                data-testid=\"button-decode-base64\"\n              >\n                <Unlock className=\"h-4 w-4 mr-2\" />\n                Decode Base64\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">Decoded Text</Label>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => copyToClipboard(base64Output)}\n                  disabled={!base64Output}\n                  data-testid=\"button-copy-decoded-base64\"\n                >\n                  <Copy className=\"h-3 w-3 mr-1\" />\n                  Copy\n                </Button>\n              </div>\n              <div className=\"w-full h-32 p-4 font-mono text-sm border border-gray-300 rounded-lg bg-gray-50 overflow-auto\">\n                <div data-testid=\"text-base64-output\">{base64Output || \"Decoded text will appear here...\"}</div>\n              </div>\n              <Button \n                onClick={encodeBase64}\n                variant=\"outline\"\n                className=\"w-full border-secondary text-secondary hover:bg-secondary hover:text-white\"\n                data-testid=\"button-encode-base64\"\n              >\n                <i className=\"fas fa-lock mr-2\"></i>\n                Encode Base64\n              </Button>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Base32 Decoder */}\n        <TabsContent value=\"base32\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <Label className=\"text-sm font-medium text-gray-700\">Base32 Input</Label>\n              <Textarea\n                value={base32Input}\n                onChange={(e) => setBase32Input(e.target.value)}\n                placeholder=\"Paste Base32 encoded text here...\"\n                className=\"h-32 font-mono text-sm\"\n                data-testid=\"textarea-base32-input\"\n              />\n              <Button \n                onClick={decodeBase32}\n                className=\"w-full bg-primary hover:bg-primary-dark\"\n                data-testid=\"button-decode-base32\"\n              >\n                <Unlock className=\"h-4 w-4 mr-2\" />\n                Decode Base32\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">Decoded Text</Label>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => copyToClipboard(base32Output)}\n                  disabled={!base32Output}\n                  data-testid=\"button-copy-decoded-base32\"\n                >\n                  <Copy className=\"h-3 w-3 mr-1\" />\n                  Copy\n                </Button>\n              </div>\n              <div className=\"w-full h-32 p-4 font-mono text-sm border border-gray-300 rounded-lg bg-gray-50 overflow-auto\">\n                <div data-testid=\"text-base32-output\">{base32Output || \"Decoded text will appear here...\"}</div>\n              </div>\n              <Button \n                onClick={encodeBase32}\n                variant=\"outline\"\n                className=\"w-full border-secondary text-secondary hover:bg-secondary hover:text-white\"\n                data-testid=\"button-encode-base32\"\n              >\n                <i className=\"fas fa-lock mr-2\"></i>\n                Encode Base32\n              </Button>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":19967},"client/src/components/duplicates-identifier.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Download, Copy, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DuplicateGroup {\n  value: string;\n  field: string;\n  items: any[];\n}\n\nexport default function DuplicatesIdentifier() {\n  const [fileType, setFileType] = useState<\"json\" | \"xml\">(\"json\");\n  const [inputData, setInputData] = useState(`[\n  {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane@example.com\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@company.com\"\n  },\n  {\n    \"id\": 4,\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane@example.com\"\n  }\n]`);\n  const [criteria, setCriteria] = useState(\"name\");\n  const [duplicateGroups, setDuplicateGroups] = useState<DuplicateGroup[]>([]);\n  const [duplicateCount, setDuplicateCount] = useState(0);\n  const { toast } = useToast();\n\n  const findDuplicates = () => {\n    if (!inputData.trim()) {\n      toast({\n        title: \"Empty Input\",\n        description: \"Please enter some data to analyze\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!criteria.trim()) {\n      toast({\n        title: \"No Criteria\",\n        description: \"Please specify duplicate criteria\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      let data;\n      \n      if (fileType === \"json\") {\n        data = JSON.parse(inputData);\n        if (!Array.isArray(data)) {\n          data = [data];\n        }\n      } else {\n        // Basic XML parsing - in production, use a proper XML parser\n        toast({\n          title: \"XML Support\",\n          description: \"XML parsing is not fully implemented yet. Please use JSON format.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const criteriaFields = criteria.split(',').map(field => field.trim());\n      const duplicatesMap = new Map<string, any[]>();\n      \n      // Group items by criteria values\n      data.forEach((item: any) => {\n        criteriaFields.forEach(field => {\n          if (item[field] !== undefined) {\n            const key = `${field}:${item[field]}`;\n            if (!duplicatesMap.has(key)) {\n              duplicatesMap.set(key, []);\n            }\n            duplicatesMap.get(key)?.push(item);\n          }\n        });\n      });\n\n      // Filter out single items (not duplicates)\n      const duplicates: DuplicateGroup[] = [];\n      duplicatesMap.forEach((items, key) => {\n        if (items.length > 1) {\n          const [field, value] = key.split(':');\n          duplicates.push({\n            field,\n            value,\n            items,\n          });\n        }\n      });\n\n      setDuplicateGroups(duplicates);\n      const totalDuplicateItems = duplicates.reduce((sum, group) => sum + group.items.length, 0);\n      setDuplicateCount(totalDuplicateItems);\n\n      toast({\n        title: \"Analysis Complete\",\n        description: `Found ${duplicates.length} duplicate groups with ${totalDuplicateItems} total items`,\n      });\n\n    } catch (error) {\n      toast({\n        title: \"Parse Error\",\n        description: error instanceof Error ? error.message : \"Could not parse input data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const exportCleanedData = () => {\n    if (!inputData.trim()) return;\n\n    try {\n      const data = JSON.parse(inputData);\n      const seen = new Set<string>();\n      const criteriaFields = criteria.split(',').map(field => field.trim());\n      \n      const cleaned = data.filter((item: any) => {\n        const key = criteriaFields.map(field => `${field}:${item[field]}`).join('|');\n        if (seen.has(key)) {\n          return false;\n        }\n        seen.add(key);\n        return true;\n      });\n\n      const cleanedJson = JSON.stringify(cleaned, null, 2);\n      downloadAsFile(cleanedJson, 'cleaned-data.json', 'application/json');\n\n      toast({\n        title: \"Exported\",\n        description: \"Cleaned data exported successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Could not export cleaned data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const exportDuplicatesOnly = () => {\n    if (duplicateGroups.length === 0) {\n      toast({\n        title: \"No Duplicates\",\n        description: \"Please find duplicates first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const duplicatesData = duplicateGroups.map(group => ({\n      field: group.field,\n      value: group.value,\n      duplicateItems: group.items,\n    }));\n\n    const duplicatesJson = JSON.stringify(duplicatesData, null, 2);\n    downloadAsFile(duplicatesJson, 'duplicates-only.json', 'application/json');\n\n    toast({\n      title: \"Exported\",\n      description: \"Duplicates data exported successfully\",\n    });\n  };\n\n  const downloadAsFile = (content: string, filename: string, mimeType: string) => {\n    const blob = new Blob([content], { type: mimeType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Content copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Copy\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-2\">\n        <h2 className=\"text-2xl font-semibold text-gray-900\">Duplicate Identifier</h2>\n        <p className=\"text-gray-600\">Find duplicate entries in JSON and XML files based on specified criteria.</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Input Section */}\n        <div className=\"space-y-4\">\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2\">File Type</Label>\n            <Tabs value={fileType} onValueChange={(value) => setFileType(value as \"json\" | \"xml\")}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"json\" data-testid=\"tab-json-duplicates\">JSON</TabsTrigger>\n                <TabsTrigger value=\"xml\" data-testid=\"tab-xml-duplicates\">XML</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700 mb-2\">Input Data</Label>\n            <Textarea\n              value={inputData}\n              onChange={(e) => setInputData(e.target.value)}\n              placeholder=\"Paste your JSON or XML data here...\"\n              className=\"h-80 font-mono text-sm resize-none\"\n              data-testid=\"textarea-duplicate-input\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"criteria\" className=\"text-sm font-medium text-gray-700 mb-2\">\n              Duplicate Criteria\n            </Label>\n            <Input\n              id=\"criteria\"\n              type=\"text\"\n              placeholder=\"e.g., name, email, id (comma-separated)\"\n              value={criteria}\n              onChange={(e) => setCriteria(e.target.value)}\n              data-testid=\"input-duplicate-criteria\"\n            />\n          </div>\n\n          <Button \n            onClick={findDuplicates}\n            className=\"w-full bg-primary hover:bg-primary-dark\"\n            data-testid=\"button-find-duplicates\"\n          >\n            <Search className=\"h-4 w-4 mr-2\" />\n            Find Duplicates\n          </Button>\n        </div>\n\n        {/* Results Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label className=\"text-sm font-medium text-gray-700\">Duplicate Results</Label>\n            <div className=\"text-sm text-gray-500\">\n              Found: <span className=\"font-medium text-warning\" data-testid=\"text-duplicate-count\">\n                {duplicateGroups.length} duplicate groups\n              </span>\n            </div>\n          </div>\n\n          <div className=\"border border-gray-300 rounded-lg\">\n            <div className=\"max-h-80 overflow-y-auto\">\n              {duplicateGroups.length === 0 ? (\n                <div className=\"p-8 text-center text-gray-500\">\n                  <AlertTriangle className=\"h-8 w-8 mx-auto mb-2 text-gray-300\" />\n                  <p>No duplicates found. Click \"Find Duplicates\" to analyze your data.</p>\n                </div>\n              ) : (\n                duplicateGroups.map((group, index) => (\n                  <div key={index} className=\"border-b border-gray-200 last:border-b-0\">\n                    <div className=\"p-4 bg-yellow-50\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <AlertTriangle className=\"h-4 w-4 text-warning\" />\n                        <span className=\"font-medium text-sm\">\n                          Duplicate Group {index + 1}: \"{group.value}\" ({group.field})\n                        </span>\n                      </div>\n                      <div className=\"space-y-2\">\n                        {group.items.map((item, itemIndex) => (\n                          <div key={itemIndex} className=\"bg-white border border-gray-200 rounded p-3\">\n                            <pre className=\"font-mono text-xs text-gray-700\">\n                              {JSON.stringify(item, null, 2)}\n                            </pre>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex space-x-2\">\n            <Button \n              onClick={exportCleanedData}\n              disabled={!inputData.trim()}\n              variant=\"outline\"\n              className=\"flex-1 border-success text-success hover:bg-success hover:text-white\"\n              data-testid=\"button-export-cleaned\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Cleaned\n            </Button>\n            <Button \n              onClick={exportDuplicatesOnly}\n              disabled={duplicateGroups.length === 0}\n              variant=\"outline\"\n              className=\"flex-1 border-warning text-warning hover:bg-warning hover:text-white\"\n              data-testid=\"button-export-duplicates\"\n            >\n              <Copy className=\"h-4 w-4 mr-2\" />\n              Export Duplicates\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11104},"client/src/components/encryption-tools.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Lock, Unlock, Key, Eye, EyeOff } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst EncryptionTools = () => {\n  const [encryptInput, setEncryptInput] = useState(\"\");\n  const [decryptInput, setDecryptInput] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [algorithm, setAlgorithm] = useState(\"aes\");\n  const [encryptResult, setEncryptResult] = useState(\"\");\n  const [decryptResult, setDecryptResult] = useState(\"\");\n  const { toast } = useToast();\n\n  // Simple encryption functions (for demo purposes)\n  const simpleEncrypt = (text: string, key: string): string => {\n    if (!text || !key) return \"\";\n    \n    let result = \"\";\n    for (let i = 0; i < text.length; i++) {\n      const charCode = text.charCodeAt(i) ^ key.charCodeAt(i % key.length);\n      result += String.fromCharCode(charCode);\n    }\n    return btoa(result); // Base64 encode\n  };\n\n  const simpleDecrypt = (encryptedText: string, key: string): string => {\n    if (!encryptedText || !key) return \"\";\n    \n    try {\n      const decoded = atob(encryptedText); // Base64 decode\n      let result = \"\";\n      for (let i = 0; i < decoded.length; i++) {\n        const charCode = decoded.charCodeAt(i) ^ key.charCodeAt(i % key.length);\n        result += String.fromCharCode(charCode);\n      }\n      return result;\n    } catch (error) {\n      return \"Invalid encrypted text or key\";\n    }\n  };\n\n  const caesarCipher = (text: string, shift: number): string => {\n    return text.replace(/[a-zA-Z]/g, (char) => {\n      const start = char <= 'Z' ? 65 : 97;\n      return String.fromCharCode(((char.charCodeAt(0) - start + shift) % 26) + start);\n    });\n  };\n\n  const rot13 = (text: string): string => {\n    return caesarCipher(text, 13);\n  };\n\n  const handleEncrypt = () => {\n    if (!encryptInput.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter text to encrypt\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let result = \"\";\n    \n    switch (algorithm) {\n      case \"aes\":\n        if (!password) {\n          toast({\n            title: \"Error\",\n            description: \"Password is required for AES encryption\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        result = simpleEncrypt(encryptInput, password);\n        break;\n      case \"caesar\":\n        const shift = password ? parseInt(password) || 3 : 3;\n        result = caesarCipher(encryptInput, shift);\n        break;\n      case \"rot13\":\n        result = rot13(encryptInput);\n        break;\n      case \"base64\":\n        result = btoa(encryptInput);\n        break;\n      default:\n        result = simpleEncrypt(encryptInput, password || \"defaultkey\");\n    }\n    \n    setEncryptResult(result);\n    toast({\n      title: \"Success\",\n      description: \"Text encrypted successfully\",\n    });\n  };\n\n  const handleDecrypt = () => {\n    if (!decryptInput.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter text to decrypt\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let result = \"\";\n    \n    try {\n      switch (algorithm) {\n        case \"aes\":\n          if (!password) {\n            toast({\n              title: \"Error\",\n              description: \"Password is required for AES decryption\",\n              variant: \"destructive\",\n            });\n            return;\n          }\n          result = simpleDecrypt(decryptInput, password);\n          break;\n        case \"caesar\":\n          const shift = password ? parseInt(password) || 3 : 3;\n          result = caesarCipher(decryptInput, -shift);\n          break;\n        case \"rot13\":\n          result = rot13(decryptInput); // ROT13 is its own inverse\n          break;\n        case \"base64\":\n          result = atob(decryptInput);\n          break;\n        default:\n          result = simpleDecrypt(decryptInput, password || \"defaultkey\");\n      }\n      \n      setDecryptResult(result);\n      toast({\n        title: \"Success\",\n        description: \"Text decrypted successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to decrypt text. Check your input and key.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const copyToClipboard = (text: string, type: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: `${type} copied to clipboard`,\n    });\n  };\n\n  const algorithms = [\n    { value: \"aes\", label: \"AES (Simulated)\", description: \"Advanced Encryption Standard\" },\n    { value: \"caesar\", label: \"Caesar Cipher\", description: \"Simple substitution cipher\" },\n    { value: \"rot13\", label: \"ROT13\", description: \"Caesar cipher with shift of 13\" },\n    { value: \"base64\", label: \"Base64\", description: \"Base64 encoding/decoding\" },\n  ];\n\n  const selectedAlgorithmInfo = algorithms.find(a => a.value === algorithm);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Lock className=\"h-5 w-5\" />\n            Encryption & Decryption Tools\n          </CardTitle>\n          <CardDescription>\n            Encrypt and decrypt text using various algorithms and methods\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Algorithm</label>\n            <Select value={algorithm} onValueChange={setAlgorithm}>\n              <SelectTrigger data-testid=\"select-algorithm\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {algorithms.map((algo) => (\n                  <SelectItem key={algo.value} value={algo.value}>\n                    {algo.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {selectedAlgorithmInfo && (\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {selectedAlgorithmInfo.description}\n              </p>\n            )}\n          </div>\n\n          {(algorithm === \"aes\" || algorithm === \"caesar\") && (\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                {algorithm === \"caesar\" ? \"Shift Value\" : \"Password/Key\"}\n              </label>\n              <div className=\"relative\">\n                <Input\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder={algorithm === \"caesar\" ? \"Enter shift value (e.g., 3)\" : \"Enter encryption password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-1 top-1 h-8 w-8 p-0\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"encrypt\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"encrypt\" data-testid=\"tab-encrypt\">\n            <Lock className=\"h-4 w-4 mr-2\" />\n            Encrypt\n          </TabsTrigger>\n          <TabsTrigger value=\"decrypt\" data-testid=\"tab-decrypt\">\n            <Unlock className=\"h-4 w-4 mr-2\" />\n            Decrypt\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"encrypt\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Encrypt Text</CardTitle>\n              <CardDescription>\n                Enter plain text to encrypt using the selected algorithm\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Textarea\n                placeholder=\"Enter text to encrypt...\"\n                value={encryptInput}\n                onChange={(e) => setEncryptInput(e.target.value)}\n                className=\"min-h-[100px]\"\n                data-testid=\"textarea-encrypt-input\"\n              />\n              \n              <Button \n                onClick={handleEncrypt} \n                className=\"w-full\"\n                data-testid=\"button-encrypt\"\n              >\n                <Lock className=\"h-4 w-4 mr-2\" />\n                Encrypt Text\n              </Button>\n\n              {encryptResult && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">Encrypted Result</label>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(encryptResult, \"Encrypted text\")}\n                      data-testid=\"button-copy-encrypted\"\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                  <div className=\"bg-gray-50 p-3 rounded border font-mono text-sm break-all\">\n                    {encryptResult}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"decrypt\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Decrypt Text</CardTitle>\n              <CardDescription>\n                Enter encrypted text to decrypt using the selected algorithm\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Textarea\n                placeholder=\"Enter encrypted text to decrypt...\"\n                value={decryptInput}\n                onChange={(e) => setDecryptInput(e.target.value)}\n                className=\"min-h-[100px]\"\n                data-testid=\"textarea-decrypt-input\"\n              />\n              \n              <Button \n                onClick={handleDecrypt} \n                className=\"w-full\"\n                data-testid=\"button-decrypt\"\n              >\n                <Unlock className=\"h-4 w-4 mr-2\" />\n                Decrypt Text\n              </Button>\n\n              {decryptResult && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">Decrypted Result</label>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(decryptResult, \"Decrypted text\")}\n                      data-testid=\"button-copy-decrypted\"\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                  <div className=\"bg-gray-50 p-3 rounded border font-mono text-sm break-all\">\n                    {decryptResult}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Security Notice</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded\">\n            <p className=\"text-sm text-yellow-800\">\n              <strong>⚠️ For Educational Purposes:</strong> These encryption tools are simplified implementations \n              for demonstration purposes. For production applications requiring strong security, \n              use established cryptographic libraries and follow security best practices.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default EncryptionTools;","size_bytes":12537},"client/src/components/file-converters.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { FileText, FileImage, Upload, Download } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ConversionResult {\n  jobId: string;\n  text?: string;\n  pages?: number;\n  info?: any;\n  messages?: any[];\n  filename: string;\n  type: string;\n}\n\nexport default function FileConverters() {\n  const [pdfFile, setPdfFile] = useState<File | null>(null);\n  const [docxFile, setDocxFile] = useState<File | null>(null);\n  const [conversionResults, setConversionResults] = useState<ConversionResult[]>([]);\n  const { toast } = useToast();\n\n  const pdfToTextMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      const response = await fetch(\"/api/convert/pdf-to-text\", {\n        method: \"POST\",\n        body: formData,\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to convert PDF to text\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const result: ConversionResult = {\n        jobId: data.jobId,\n        text: data.text,\n        pages: data.pages,\n        info: data.info,\n        filename: `${pdfFile?.name?.replace('.pdf', '') || 'converted'}.txt`,\n        type: \"text\",\n      };\n      setConversionResults(prev => [...prev, result]);\n      toast({\n        title: \"Success\",\n        description: \"PDF converted to text successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Conversion Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const docxToTextMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      const response = await fetch(\"/api/convert/docx-to-text\", {\n        method: \"POST\",\n        body: formData,\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to convert DOCX to text\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const result: ConversionResult = {\n        jobId: data.jobId,\n        text: data.text,\n        messages: data.messages,\n        filename: `${docxFile?.name?.replace('.docx', '') || 'converted'}.txt`,\n        type: \"text\",\n      };\n      setConversionResults(prev => [...prev, result]);\n      toast({\n        title: \"Success\",\n        description: \"DOCX converted to text successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Conversion Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePdfFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== \"application/pdf\") {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please select a PDF file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      if (file.size > 50 * 1024 * 1024) { // 50MB\n        toast({\n          title: \"File Too Large\",\n          description: \"File size must be less than 50MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setPdfFile(file);\n    }\n  };\n\n  const handleDocxFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (!file.name.toLowerCase().endsWith('.docx')) {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please select a DOCX file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      if (file.size > 50 * 1024 * 1024) { // 50MB\n        toast({\n          title: \"File Too Large\",\n          description: \"File size must be less than 50MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setDocxFile(file);\n    }\n  };\n\n  const convertPdfToText = () => {\n    if (!pdfFile) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select a PDF file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    pdfToTextMutation.mutate(pdfFile);\n  };\n\n  const convertDocxToText = () => {\n    if (!docxFile) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select a DOCX file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    docxToTextMutation.mutate(docxFile);\n  };\n\n  const downloadResult = (result: ConversionResult) => {\n    if (!result.text) return;\n\n    const blob = new Blob([result.text], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = result.filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Downloaded\",\n      description: `${result.filename} has been downloaded`,\n    });\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-semibold text-gray-900\">File Converters</h2>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* PDF Converter */}\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"bg-red-100 p-2 rounded-lg\">\n                <FileText className=\"h-6 w-6 text-red-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">PDF Converter</h3>\n                <p className=\"text-sm text-gray-500\">Convert PDF to text or images</p>\n              </div>\n            </div>\n\n            {/* File Upload Zone */}\n            <div \n              className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors mb-4 cursor-pointer\"\n              onClick={() => document.getElementById('pdf-upload')?.click()}\n              data-testid=\"dropzone-pdf\"\n            >\n              <Upload className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600 mb-2\">Drop PDF files here or</p>\n              <Button variant=\"outline\" size=\"sm\">\n                Choose File\n              </Button>\n              <p className=\"text-xs text-gray-500 mt-2\">Max file size: 50MB</p>\n            </div>\n            \n            <input\n              id=\"pdf-upload\"\n              type=\"file\"\n              accept=\".pdf\"\n              onChange={handlePdfFileSelect}\n              className=\"hidden\"\n              data-testid=\"input-pdf-file\"\n            />\n\n            {pdfFile && (\n              <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <FileText className=\"h-4 w-4 text-red-600\" />\n                    <span className=\"font-medium\" data-testid=\"text-pdf-filename\">{pdfFile.name}</span>\n                  </div>\n                  <span className=\"text-gray-500\" data-testid=\"text-pdf-filesize\">\n                    {formatFileSize(pdfFile.size)}\n                  </span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-3\">\n              <label className=\"block text-sm font-medium text-gray-700\">Convert to:</label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={convertPdfToText}\n                  disabled={!pdfFile || pdfToTextMutation.isPending}\n                  data-testid=\"button-convert-pdf-to-text\"\n                >\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  {pdfToTextMutation.isPending ? \"Converting...\" : \"Text\"}\n                </Button>\n                <Button variant=\"outline\" disabled data-testid=\"button-convert-pdf-to-images\">\n                  <FileImage className=\"h-4 w-4 mr-2\" />\n                  Images\n                </Button>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            {pdfToTextMutation.isPending && (\n              <div className=\"mt-4\">\n                <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n                  <span>Converting...</span>\n                  <span>Processing</span>\n                </div>\n                <Progress value={75} className=\"w-full\" />\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* DOCX Converter */}\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"bg-blue-100 p-2 rounded-lg\">\n                <FileText className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">DOCX Converter</h3>\n                <p className=\"text-sm text-gray-500\">Convert Word documents to text or PDF</p>\n              </div>\n            </div>\n\n            {/* File Upload Zone */}\n            <div \n              className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors mb-4 cursor-pointer\"\n              onClick={() => document.getElementById('docx-upload')?.click()}\n              data-testid=\"dropzone-docx\"\n            >\n              <Upload className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600 mb-2\">Drop DOCX files here or</p>\n              <Button variant=\"outline\" size=\"sm\">\n                Choose File\n              </Button>\n              <p className=\"text-xs text-gray-500 mt-2\">Max file size: 50MB</p>\n            </div>\n            \n            <input\n              id=\"docx-upload\"\n              type=\"file\"\n              accept=\".docx\"\n              onChange={handleDocxFileSelect}\n              className=\"hidden\"\n              data-testid=\"input-docx-file\"\n            />\n\n            {docxFile && (\n              <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <FileText className=\"h-4 w-4 text-blue-600\" />\n                    <span className=\"font-medium\" data-testid=\"text-docx-filename\">{docxFile.name}</span>\n                  </div>\n                  <span className=\"text-gray-500\" data-testid=\"text-docx-filesize\">\n                    {formatFileSize(docxFile.size)}\n                  </span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-3\">\n              <label className=\"block text-sm font-medium text-gray-700\">Convert to:</label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={convertDocxToText}\n                  disabled={!docxFile || docxToTextMutation.isPending}\n                  data-testid=\"button-convert-docx-to-text\"\n                >\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  {docxToTextMutation.isPending ? \"Converting...\" : \"Text\"}\n                </Button>\n                <Button variant=\"outline\" disabled data-testid=\"button-convert-docx-to-pdf\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  PDF\n                </Button>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            {docxToTextMutation.isPending && (\n              <div className=\"mt-4\">\n                <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n                  <span>Converting...</span>\n                  <span>Processing</span>\n                </div>\n                <Progress value={75} className=\"w-full\" />\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Conversion Results */}\n      {conversionResults.length > 0 && (\n        <Card className=\"bg-gray-50\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Conversion Results</h3>\n            <div className=\"space-y-4\">\n              {conversionResults.map((result, index) => (\n                <div key={index} className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <FileText className=\"h-5 w-5 text-gray-400\" />\n                      <div>\n                        <p className=\"font-medium text-gray-900\" data-testid={`text-result-filename-${index}`}>\n                          {result.filename}\n                        </p>\n                        <p className=\"text-sm text-gray-500\">\n                          {result.pages && `${result.pages} pages • `}\n                          {result.text ? `${Math.round(result.text.length / 1024)} KB` : 'Processing...'}\n                        </p>\n                      </div>\n                    </div>\n                    <Button \n                      onClick={() => downloadResult(result)}\n                      disabled={!result.text}\n                      size=\"sm\"\n                      className=\"bg-primary hover:bg-primary-dark\"\n                      data-testid={`button-download-result-${index}`}\n                    >\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":14413},"client/src/components/hashing-tools.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Copy, Hash, Download, Shield, CheckCircle, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst HashingTools = () => {\n  const [input, setInput] = useState(\"\");\n  const [selectedAlgorithms, setSelectedAlgorithms] = useState<string[]>([\"md5\", \"sha256\"]);\n  const [results, setResults] = useState<Record<string, string>>({});\n  const [verifyText, setVerifyText] = useState(\"\");\n  const [verifyHash, setVerifyHash] = useState(\"\");\n  const [verifyResult, setVerifyResult] = useState<{match: boolean, algorithm: string} | null>(null);\n  const { toast } = useToast();\n\n  const hashAlgorithms = [\n    { value: \"md5\", label: \"MD5\", description: \"128-bit hash function\" },\n    { value: \"sha1\", label: \"SHA-1\", description: \"160-bit hash function\" },\n    { value: \"sha256\", label: \"SHA-256\", description: \"256-bit hash function\" },\n    { value: \"sha512\", label: \"SHA-512\", description: \"512-bit hash function\" },\n    { value: \"sha3-256\", label: \"SHA-3-256\", description: \"SHA-3 with 256-bit output\" },\n    { value: \"sha3-512\", label: \"SHA-3-512\", description: \"SHA-3 with 512-bit output\" },\n  ];\n\n  const generateHash = async (algorithm: string, text: string): Promise<string> => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(text);\n    \n    let hashBuffer: ArrayBuffer;\n    \n    switch (algorithm) {\n      case \"md5\":\n        // Simple MD5 implementation (note: for production, use a proper crypto library)\n        return await simpleHash(text, \"MD5\");\n      case \"sha1\":\n        hashBuffer = await crypto.subtle.digest(\"SHA-1\", data);\n        break;\n      case \"sha256\":\n        hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n        break;\n      case \"sha512\":\n        hashBuffer = await crypto.subtle.digest(\"SHA-512\", data);\n        break;\n      case \"sha3-256\":\n      case \"sha3-512\":\n        // For demo purposes, using SHA-256 as fallback\n        hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n        break;\n      default:\n        hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n    }\n    \n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  };\n\n  const simpleHash = async (text: string, algorithm: string): Promise<string> => {\n    // Simple hash function for demo - in production use proper crypto library\n    let hash = 0;\n    for (let i = 0; i < text.length; i++) {\n      const char = text.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(16).padStart(8, '0');\n  };\n\n  const handleGenerateHashes = async () => {\n    if (!input.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter some text to hash\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedAlgorithms.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please select at least one hash algorithm\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newResults: Record<string, string> = {};\n    \n    for (const algorithmValue of selectedAlgorithms) {\n      try {\n        newResults[algorithmValue] = await generateHash(algorithmValue, input);\n      } catch (error) {\n        newResults[algorithmValue] = \"Error generating hash\";\n      }\n    }\n    \n    setResults(newResults);\n    toast({\n      title: \"Success\",\n      description: `${selectedAlgorithms.length} hash(es) generated successfully`,\n    });\n  };\n\n  const handleAlgorithmToggle = (algorithmValue: string, checked: boolean) => {\n    if (checked) {\n      setSelectedAlgorithms(prev => [...prev, algorithmValue]);\n    } else {\n      setSelectedAlgorithms(prev => prev.filter(alg => alg !== algorithmValue));\n    }\n  };\n\n  const handleVerifyHash = async () => {\n    if (!verifyText.trim() || !verifyHash.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter both text and hash to verify\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let matchFound = false;\n    let matchedAlgorithm = \"\";\n\n    // Try each algorithm to see if any produces the same hash\n    for (const algorithm of hashAlgorithms) {\n      try {\n        const generatedHash = await generateHash(algorithm.value, verifyText);\n        if (generatedHash.toLowerCase() === verifyHash.toLowerCase()) {\n          matchFound = true;\n          matchedAlgorithm = algorithm.label;\n          break;\n        }\n      } catch (error) {\n        continue;\n      }\n    }\n\n    setVerifyResult({ match: matchFound, algorithm: matchedAlgorithm });\n    \n    if (matchFound) {\n      toast({\n        title: \"Hash Verified ✓\",\n        description: `Text matches the ${matchedAlgorithm} hash`,\n      });\n    } else {\n      toast({\n        title: \"Hash Mismatch ✗\",\n        description: \"Text does not match the provided hash with any algorithm\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const copyToClipboard = (hash: string, algorithm: string) => {\n    navigator.clipboard.writeText(hash);\n    toast({\n      title: \"Copied\",\n      description: `${algorithm.toUpperCase()} hash copied to clipboard`,\n    });\n  };\n\n  const downloadHashes = () => {\n    const content = Object.entries(results)\n      .map(([algo, hash]) => `${algo.toUpperCase()}: ${hash}`)\n      .join('\\n');\n    \n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'hashes.txt';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Hash className=\"h-5 w-5\" />\n            Cryptographic Hashing Tools\n          </CardTitle>\n          <CardDescription>\n            Generate and verify secure hashes using various algorithms\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      <Tabs defaultValue=\"generate\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"generate\" data-testid=\"tab-generate-hash\">\n            <Hash className=\"h-4 w-4 mr-2\" />\n            Generate Hashes\n          </TabsTrigger>\n          <TabsTrigger value=\"verify\" data-testid=\"tab-verify-hash\">\n            <Shield className=\"h-4 w-4 mr-2\" />\n            Verify Hash\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"generate\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Generate Hashes</CardTitle>\n              <CardDescription>\n                Select algorithms and generate secure hashes for your text\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Input Text</label>\n                <Textarea\n                  placeholder=\"Enter text to hash...\"\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-hash-input\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-3 block\">Select Hash Algorithms</label>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {hashAlgorithms.map((algorithm) => (\n                    <div key={algorithm.value} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={algorithm.value}\n                        checked={selectedAlgorithms.includes(algorithm.value)}\n                        onCheckedChange={(checked) => handleAlgorithmToggle(algorithm.value, checked as boolean)}\n                        data-testid={`checkbox-${algorithm.value}`}\n                      />\n                      <label \n                        htmlFor={algorithm.value} \n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n                      >\n                        {algorithm.label}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n                <p className=\"text-xs text-gray-500 mt-2\">\n                  Select one or more algorithms to generate hashes\n                </p>\n              </div>\n\n              <div className=\"flex gap-4\">\n                <Button \n                  onClick={handleGenerateHashes}\n                  className=\"flex-1\"\n                  disabled={selectedAlgorithms.length === 0}\n                  data-testid=\"button-generate-hashes\"\n                >\n                  Generate Selected Hashes ({selectedAlgorithms.length})\n                </Button>\n                {Object.keys(results).length > 0 && (\n                  <Button \n                    variant=\"outline\" \n                    onClick={downloadHashes}\n                    data-testid=\"button-download-hashes\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"verify\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Verify Hash</CardTitle>\n              <CardDescription>\n                Check if a hash matches the given text using any supported algorithm\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Original Text</label>\n                <Textarea\n                  placeholder=\"Enter the original text...\"\n                  value={verifyText}\n                  onChange={(e) => setVerifyText(e.target.value)}\n                  className=\"min-h-[80px]\"\n                  data-testid=\"textarea-verify-text\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Hash to Verify</label>\n                <Input\n                  placeholder=\"Enter the hash value to verify...\"\n                  value={verifyHash}\n                  onChange={(e) => setVerifyHash(e.target.value)}\n                  className=\"font-mono\"\n                  data-testid=\"input-verify-hash\"\n                />\n              </div>\n\n              <Button \n                onClick={handleVerifyHash}\n                className=\"w-full\"\n                data-testid=\"button-verify-hash\"\n              >\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Verify Hash\n              </Button>\n\n              {verifyResult && (\n                <div className={`p-4 rounded border ${verifyResult.match ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}>\n                  <div className=\"flex items-center gap-2\">\n                    {verifyResult.match ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                    ) : (\n                      <XCircle className=\"h-5 w-5 text-red-600\" />\n                    )}\n                    <span className={`font-medium ${verifyResult.match ? 'text-green-800' : 'text-red-800'}`}>\n                      {verifyResult.match ? 'Hash Verified ✓' : 'Hash Mismatch ✗'}\n                    </span>\n                  </div>\n                  <p className={`text-sm mt-1 ${verifyResult.match ? 'text-green-700' : 'text-red-700'}`}>\n                    {verifyResult.match \n                      ? `Text matches the provided hash using ${verifyResult.algorithm} algorithm`\n                      : 'The text does not produce the provided hash with any supported algorithm'\n                    }\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {Object.keys(results).length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Hash Results</CardTitle>\n            <CardDescription>\n              Generated hashes for your input text\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {hashAlgorithms.map((algorithm) => {\n              const hash = results[algorithm.value];\n              if (!hash) return null;\n              \n              return (\n                <div key={algorithm.value} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {algorithm.label}\n                      </Badge>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {algorithm.description}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(hash, algorithm.label)}\n                      data-testid={`button-copy-${algorithm.value}`}\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"bg-gray-50 p-3 rounded border font-mono text-sm break-all\">\n                    {hash}\n                  </div>\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Hash Algorithm Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Security Levels</h4>\n              <ul className=\"space-y-1 text-gray-600\">\n                <li>• <strong>MD5:</strong> Not cryptographically secure</li>\n                <li>• <strong>SHA-1:</strong> Deprecated, avoid for security</li>\n                <li>• <strong>SHA-256:</strong> Strong, widely used</li>\n                <li>• <strong>SHA-512:</strong> Very strong, 512-bit output</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2\">Use Cases</h4>\n              <ul className=\"space-y-1 text-gray-600\">\n                <li>• <strong>Data integrity:</strong> File checksums</li>\n                <li>• <strong>Password storage:</strong> Secure hashing</li>\n                <li>• <strong>Digital signatures:</strong> Document verification</li>\n                <li>• <strong>Blockchain:</strong> Proof of work</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default HashingTools;","size_bytes":15474},"client/src/components/json-tools.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Copy, Trash2, FileText, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function JsonTools() {\n  const [input, setInput] = useState(`{\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"email\": \"john@example.com\",\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"zip\": \"10001\"\n  },\n  \"hobbies\": [\"reading\", \"coding\", \"hiking\"]\n}`);\n  const [output, setOutput] = useState(\"\");\n  const [isValid, setIsValid] = useState<boolean | null>(null);\n  const [stats, setStats] = useState<any>(null);\n  const { toast } = useToast();\n\n  const validateMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", \"/api/validate/json\", { content });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setIsValid(data.valid);\n      if (data.valid) {\n        setOutput(data.formatted);\n        setStats(data.stats);\n      } else {\n        setOutput(`Error: ${data.error}`);\n        setStats(null);\n      }\n    },\n    onError: (error) => {\n      setIsValid(false);\n      setOutput(`Error: ${error.message}`);\n      setStats(null);\n    },\n  });\n\n  const handleFormat = () => {\n    if (!input.trim()) {\n      toast({\n        title: \"Empty Input\",\n        description: \"Please enter some JSON to format\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    validateMutation.mutate(input);\n  };\n\n  const handleValidate = () => {\n    if (!input.trim()) {\n      toast({\n        title: \"Empty Input\",\n        description: \"Please enter some JSON to validate\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    validateMutation.mutate(input);\n  };\n\n  const handleMinify = () => {\n    try {\n      const parsed = JSON.parse(input);\n      const minified = JSON.stringify(parsed);\n      setOutput(minified);\n      setIsValid(true);\n      toast({\n        title: \"Success\",\n        description: \"JSON minified successfully\",\n      });\n    } catch (error) {\n      setIsValid(false);\n      setOutput(`Error: ${error instanceof Error ? error.message : \"Invalid JSON\"}`);\n      toast({\n        title: \"Invalid JSON\",\n        description: \"Cannot minify invalid JSON\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Content copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Copy\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const clearInput = () => {\n    setInput(\"\");\n    setOutput(\"\");\n    setIsValid(null);\n    setStats(null);\n  };\n\n  const pasteFromClipboard = async () => {\n    try {\n      const text = await navigator.clipboard.readText();\n      setInput(text);\n      toast({\n        title: \"Pasted!\",\n        description: \"Content pasted from clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Paste\",\n        description: \"Could not paste from clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-semibold text-gray-900\">JSON Formatter & Validator</h2>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Input Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label className=\"text-sm font-medium text-gray-700\">Input JSON</Label>\n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={clearInput}\n                data-testid=\"button-clear-json\"\n              >\n                <Trash2 className=\"h-3 w-3 mr-1\" />\n                Clear\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={pasteFromClipboard}\n                data-testid=\"button-paste-json\"\n              >\n                <FileText className=\"h-3 w-3 mr-1\" />\n                Paste\n              </Button>\n            </div>\n          </div>\n          \n          <Textarea\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Paste your JSON here...\"\n            className=\"h-80 font-mono text-sm resize-none\"\n            data-testid=\"textarea-json-input\"\n          />\n\n          <div className=\"flex space-x-2\">\n            <Button \n              onClick={handleFormat}\n              disabled={validateMutation.isPending}\n              className=\"flex-1 bg-primary hover:bg-primary-dark\"\n              data-testid=\"button-format-json\"\n            >\n              <i className=\"fas fa-align-left mr-2\"></i>\n              {validateMutation.isPending ? \"Formatting...\" : \"Format\"}\n            </Button>\n            <Button \n              onClick={handleValidate}\n              disabled={validateMutation.isPending}\n              variant=\"outline\"\n              className=\"flex-1 border-success text-success hover:bg-success hover:text-white\"\n              data-testid=\"button-validate-json\"\n            >\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\n              Validate\n            </Button>\n            <Button \n              onClick={handleMinify}\n              disabled={validateMutation.isPending}\n              variant=\"outline\"\n              className=\"flex-1 border-warning text-warning hover:bg-warning hover:text-white\"\n              data-testid=\"button-minify-json\"\n            >\n              <i className=\"fas fa-compress mr-2\"></i>\n              Minify\n            </Button>\n          </div>\n        </div>\n\n        {/* Output Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label className=\"text-sm font-medium text-gray-700\">Formatted JSON</Label>\n            <div className=\"flex items-center space-x-2\">\n              {isValid !== null && (\n                <div className={`flex items-center text-sm ${isValid ? 'text-success' : 'text-error'}`}>\n                  {isValid ? (\n                    <CheckCircle className=\"h-4 w-4 mr-1\" />\n                  ) : (\n                    <AlertCircle className=\"h-4 w-4 mr-1\" />\n                  )}\n                  <span>{isValid ? \"Valid JSON\" : \"Invalid JSON\"}</span>\n                </div>\n              )}\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => copyToClipboard(output)}\n                disabled={!output}\n                data-testid=\"button-copy-json\"\n              >\n                <Copy className=\"h-3 w-3 mr-1\" />\n                Copy\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            <pre className=\"w-full h-80 p-4 font-mono text-sm border border-gray-300 rounded-lg bg-gray-50 overflow-auto\">\n              <code data-testid=\"text-json-output\">{output || \"Formatted JSON will appear here...\"}</code>\n            </pre>\n          </div>\n\n          {/* JSON Stats */}\n          {stats && (\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">JSON Statistics</h4>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-gray-500\">Size:</span>\n                  <span className=\"font-medium ml-1\" data-testid=\"text-json-size\">\n                    {formatBytes(stats.size)}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-gray-500\">Lines:</span>\n                  <span className=\"font-medium ml-1\" data-testid=\"text-json-lines\">\n                    {stats.lines}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-gray-500\">Objects:</span>\n                  <span className=\"font-medium ml-1\" data-testid=\"text-json-objects\">\n                    {stats.objects}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-gray-500\">Arrays:</span>\n                  <span className=\"font-medium ml-1\" data-testid=\"text-json-arrays\">\n                    {stats.arrays}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9172},"client/src/components/qr-tools.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { QrCode, Download, Upload, Camera } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst QRTools = () => {\n  const [generateText, setGenerateText] = useState(\"\");\n  const [qrSize, setQrSize] = useState(\"200\");\n  const [qrColor, setQrColor] = useState(\"#000000\");\n  const [bgColor, setBgColor] = useState(\"#ffffff\");\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const [scanResult, setScanResult] = useState(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const generateQRCode = () => {\n    if (!generateText.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter text to generate QR code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Using a free QR code API service\n    const apiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${qrSize}x${qrSize}&data=${encodeURIComponent(generateText)}&color=${qrColor.substring(1)}&bgcolor=${bgColor.substring(1)}`;\n    setQrCodeUrl(apiUrl);\n    \n    toast({\n      title: \"Success\",\n      description: \"QR code generated successfully\",\n    });\n  };\n\n  const downloadQRCode = () => {\n    if (!qrCodeUrl) return;\n    \n    const link = document.createElement('a');\n    link.href = qrCodeUrl;\n    link.download = 'qrcode.png';\n    link.click();\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // For demo purposes, we'll simulate QR code reading\n    // In a real implementation, you'd use a QR code reading library\n    setTimeout(() => {\n      setScanResult(\"Demo QR Code Content: \" + file.name + \" - QR reading would happen here with a proper library\");\n      toast({\n        title: \"Success\",\n        description: \"QR code scanned successfully\",\n      });\n    }, 1000);\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Text copied to clipboard\",\n    });\n  };\n\n  const qrTypes = [\n    { value: \"text\", label: \"Plain Text\" },\n    { value: \"url\", label: \"Website URL\" },\n    { value: \"email\", label: \"Email Address\" },\n    { value: \"phone\", label: \"Phone Number\" },\n    { value: \"sms\", label: \"SMS Message\" },\n    { value: \"wifi\", label: \"WiFi Credentials\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <QrCode className=\"h-5 w-5\" />\n            QR Code Generator & Scanner\n          </CardTitle>\n          <CardDescription>\n            Generate QR codes from text and scan existing QR codes from images\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      <Tabs defaultValue=\"generate\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"generate\" data-testid=\"tab-generate\">\n            Generate QR Code\n          </TabsTrigger>\n          <TabsTrigger value=\"scan\" data-testid=\"tab-scan\">\n            Scan QR Code\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"generate\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Generate QR Code</CardTitle>\n              <CardDescription>\n                Create QR codes for text, URLs, contact info, and more\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Content Type</label>\n                <Select defaultValue=\"text\">\n                  <SelectTrigger data-testid=\"select-qr-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {qrTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Content</label>\n                <Textarea\n                  placeholder=\"Enter text, URL, email, phone number, etc...\"\n                  value={generateText}\n                  onChange={(e) => setGenerateText(e.target.value)}\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-qr-content\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Size (px)</label>\n                  <Select value={qrSize} onValueChange={setQrSize}>\n                    <SelectTrigger data-testid=\"select-qr-size\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"150\">150x150</SelectItem>\n                      <SelectItem value=\"200\">200x200</SelectItem>\n                      <SelectItem value=\"300\">300x300</SelectItem>\n                      <SelectItem value=\"400\">400x400</SelectItem>\n                      <SelectItem value=\"500\">500x500</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">QR Color</label>\n                  <Input\n                    type=\"color\"\n                    value={qrColor}\n                    onChange={(e) => setQrColor(e.target.value)}\n                    data-testid=\"input-qr-color\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Background</label>\n                  <Input\n                    type=\"color\"\n                    value={bgColor}\n                    onChange={(e) => setBgColor(e.target.value)}\n                    data-testid=\"input-bg-color\"\n                  />\n                </div>\n              </div>\n\n              <Button \n                onClick={generateQRCode} \n                className=\"w-full\"\n                data-testid=\"button-generate-qr\"\n              >\n                <QrCode className=\"h-4 w-4 mr-2\" />\n                Generate QR Code\n              </Button>\n\n              {qrCodeUrl && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">Generated QR Code</label>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={downloadQRCode}\n                      data-testid=\"button-download-qr\"\n                    >\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download\n                    </Button>\n                  </div>\n                  <div className=\"flex justify-center p-4 bg-gray-50 rounded border\">\n                    <img \n                      src={qrCodeUrl} \n                      alt=\"Generated QR Code\" \n                      className=\"border\"\n                      data-testid=\"img-generated-qr\"\n                    />\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"scan\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Scan QR Code</CardTitle>\n              <CardDescription>\n                Upload an image containing a QR code to decode its content\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Upload QR Code Image</label>\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <input\n                    type=\"file\"\n                    ref={fileInputRef}\n                    onChange={handleFileUpload}\n                    accept=\"image/*\"\n                    className=\"hidden\"\n                    data-testid=\"input-qr-file\"\n                  />\n                  <Upload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 mb-4\">\n                    Drag and drop an image file or click to browse\n                  </p>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => fileInputRef.current?.click()}\n                    data-testid=\"button-upload-qr\"\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Choose File\n                  </Button>\n                </div>\n              </div>\n\n              {scanResult && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">Scanned Content</label>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(scanResult)}\n                      data-testid=\"button-copy-scanned\"\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                  <div className=\"bg-gray-50 p-3 rounded border font-mono text-sm break-all\">\n                    {scanResult}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"bg-blue-50 border border-blue-200 p-4 rounded\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>📱 Tip:</strong> For best results, ensure the QR code is clear, \n                  well-lit, and fills a good portion of the image frame.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>QR Code Use Cases</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 text-sm\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Common Applications</h4>\n              <ul className=\"space-y-1 text-gray-600\">\n                <li>• Website URLs for easy mobile access</li>\n                <li>• Contact information (vCard format)</li>\n                <li>• WiFi credentials for guest networks</li>\n                <li>• Event tickets and confirmation codes</li>\n                <li>• Product information and inventory</li>\n                <li>• Social media profile links</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2\">Best Practices</h4>\n              <ul className=\"space-y-1 text-gray-600\">\n                <li>• Use high contrast colors</li>\n                <li>• Keep content concise for readability</li>\n                <li>• Test with multiple devices</li>\n                <li>• Include error correction for reliability</li>\n                <li>• Provide fallback text when possible</li>\n                <li>• Consider printing quality requirements</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default QRTools;","size_bytes":12142},"client/src/components/text-converters.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Copy, Type, FileText, ArrowRight } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst TextConverters = () => {\n  const [inputText, setInputText] = useState(\"Hello World Example Text\");\n  const [caseResults, setCaseResults] = useState<Record<string, string>>({});\n  const [propertiesInput, setPropertiesInput] = useState(`# Database Configuration\ndatabase.host=localhost\ndatabase.port=5432\ndatabase.username=admin\ndatabase.password=secret123\ndatabase.name=myapp\n\n# Server Settings\nserver.port=8080\nserver.timeout=30000\nserver.ssl.enabled=true\n\n# Logging\nlogging.level=INFO\nlogging.file.path=/var/log/app.log`);\n  const [yamlOutput, setYamlOutput] = useState(\"\");\n  const { toast } = useToast();\n\n  const caseConverters = [\n    {\n      name: \"lowercase\",\n      label: \"lower case\",\n      description: \"All characters in lowercase\",\n      convert: (text: string) => text.toLowerCase()\n    },\n    {\n      name: \"uppercase\",\n      label: \"UPPER CASE\",\n      description: \"All characters in uppercase\",\n      convert: (text: string) => text.toUpperCase()\n    },\n    {\n      name: \"camelcase\",\n      label: \"lowerCamelCase\",\n      description: \"First word lowercase, subsequent words capitalized\",\n      convert: (text: string) => {\n        return text\n          .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n            return index === 0 ? word.toLowerCase() : word.toUpperCase();\n          })\n          .replace(/\\s+/g, '');\n      }\n    },\n    {\n      name: \"pascalcase\",\n      label: \"UpperCamelCase\",\n      description: \"First letter of each word capitalized, no spaces\",\n      convert: (text: string) => {\n        return text\n          .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word) => word.toUpperCase())\n          .replace(/\\s+/g, '');\n      }\n    },\n    {\n      name: \"snakecase\",\n      label: \"snake_case\",\n      description: \"Words separated by underscores, all lowercase\",\n      convert: (text: string) => {\n        return text\n          .replace(/\\W+/g, ' ')\n          .split(/ |\\B(?=[A-Z])/)\n          .map(word => word.toLowerCase())\n          .join('_');\n      }\n    },\n    {\n      name: \"kebabcase\",\n      label: \"kebab-case\",\n      description: \"Words separated by hyphens, all lowercase\",\n      convert: (text: string) => {\n        return text\n          .replace(/\\W+/g, ' ')\n          .split(/ |\\B(?=[A-Z])/)\n          .map(word => word.toLowerCase())\n          .join('-');\n      }\n    },\n    {\n      name: \"constantcase\",\n      label: \"CONSTANT_CASE\",\n      description: \"Words separated by underscores, all uppercase\",\n      convert: (text: string) => {\n        return text\n          .replace(/\\W+/g, ' ')\n          .split(/ |\\B(?=[A-Z])/)\n          .map(word => word.toUpperCase())\n          .join('_');\n      }\n    }\n  ];\n\n  const convertAllCases = () => {\n    if (!inputText.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter some text to convert\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const results: Record<string, string> = {};\n    caseConverters.forEach(converter => {\n      results[converter.name] = converter.convert(inputText);\n    });\n    \n    setCaseResults(results);\n    toast({\n      title: \"Success\",\n      description: \"Text converted to all case formats\",\n    });\n  };\n\n  const convertPropertiesToYaml = () => {\n    if (!propertiesInput.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter properties content to convert\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const lines = propertiesInput.split('\\n');\n      const yamlStructure: any = {};\n      \n      lines.forEach(line => {\n        const trimmedLine = line.trim();\n        \n        // Skip empty lines and comments\n        if (!trimmedLine || trimmedLine.startsWith('#')) {\n          return;\n        }\n        \n        const equalIndex = trimmedLine.indexOf('=');\n        if (equalIndex === -1) return;\n        \n        const key = trimmedLine.substring(0, equalIndex).trim();\n        const value = trimmedLine.substring(equalIndex + 1).trim();\n        \n        // Handle nested properties (e.g., database.host -> database: host:)\n        const keyParts = key.split('.');\n        let current = yamlStructure;\n        \n        for (let i = 0; i < keyParts.length - 1; i++) {\n          const part = keyParts[i];\n          if (!current[part]) {\n            current[part] = {};\n          }\n          current = current[part];\n        }\n        \n        const lastKey = keyParts[keyParts.length - 1];\n        // Convert boolean and numeric values\n        let convertedValue: any = value;\n        if (value.toLowerCase() === 'true') convertedValue = true;\n        else if (value.toLowerCase() === 'false') convertedValue = false;\n        else if (!isNaN(Number(value)) && value !== '') convertedValue = Number(value);\n        \n        current[lastKey] = convertedValue;\n      });\n      \n      // Convert to YAML format\n      const yamlString = objectToYaml(yamlStructure, 0);\n      setYamlOutput(yamlString);\n      \n      toast({\n        title: \"Success\",\n        description: \"Properties converted to YAML successfully\",\n      });\n    } catch (error) {\n      setYamlOutput(\"Error: Failed to convert properties to YAML\");\n      toast({\n        title: \"Error\",\n        description: \"Failed to convert properties to YAML\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const objectToYaml = (obj: any, indent: number): string => {\n    let yaml = '';\n    const spaces = '  '.repeat(indent);\n    \n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        yaml += `${spaces}${key}:\\n`;\n        yaml += objectToYaml(value, indent + 1);\n      } else {\n        const yamlValue = typeof value === 'string' ? `\"${value}\"` : value;\n        yaml += `${spaces}${key}: ${yamlValue}\\n`;\n      }\n    }\n    \n    return yaml;\n  };\n\n  const copyToClipboard = (text: string, type: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: `${type} copied to clipboard`,\n    });\n  };\n\n  const downloadYaml = () => {\n    const blob = new Blob([yamlOutput], { type: 'text/yaml' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'converted.yaml';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Type className=\"h-5 w-5\" />\n            Text Case Converters & Format Tools\n          </CardTitle>\n          <CardDescription>\n            Convert text between different case formats and transform file formats\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      <Tabs defaultValue=\"case-converter\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"case-converter\" data-testid=\"tab-case-converter\">\n            <Type className=\"h-4 w-4 mr-2\" />\n            Case Converter\n          </TabsTrigger>\n          <TabsTrigger value=\"properties-yaml\" data-testid=\"tab-properties-yaml\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Properties to YAML\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"case-converter\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Text Case Converter</CardTitle>\n              <CardDescription>\n                Convert text between various case formats\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Input Text</label>\n                <Textarea\n                  placeholder=\"Enter text to convert...\"\n                  value={inputText}\n                  onChange={(e) => setInputText(e.target.value)}\n                  className=\"min-h-[80px]\"\n                  data-testid=\"textarea-case-input\"\n                />\n              </div>\n\n              <Button \n                onClick={convertAllCases}\n                className=\"w-full\"\n                data-testid=\"button-convert-cases\"\n              >\n                <Type className=\"h-4 w-4 mr-2\" />\n                Convert to All Cases\n              </Button>\n\n              {Object.keys(caseResults).length > 0 && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Conversion Results</h3>\n                  <div className=\"space-y-3\">\n                    {caseConverters.map((converter) => {\n                      const result = caseResults[converter.name];\n                      if (!result) return null;\n                      \n                      return (\n                        <div key={converter.name} className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {converter.label}\n                              </Badge>\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                {converter.description}\n                              </p>\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(result, converter.label)}\n                              data-testid={`button-copy-${converter.name}`}\n                            >\n                              <Copy className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                          <div className=\"bg-gray-50 p-3 rounded border font-mono text-sm break-all\">\n                            {result}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"properties-yaml\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Properties to YAML Converter</CardTitle>\n              <CardDescription>\n                Convert Java properties files to YAML format\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Properties File Content</label>\n                    <Textarea\n                      placeholder=\"Enter properties file content...\"\n                      value={propertiesInput}\n                      onChange={(e) => setPropertiesInput(e.target.value)}\n                      className=\"min-h-[300px] font-mono text-sm\"\n                      data-testid=\"textarea-properties-input\"\n                    />\n                  </div>\n                  \n                  <Button \n                    onClick={convertPropertiesToYaml}\n                    className=\"w-full\"\n                    data-testid=\"button-convert-properties\"\n                  >\n                    <ArrowRight className=\"h-4 w-4 mr-2\" />\n                    Convert to YAML\n                  </Button>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium\">YAML Output</label>\n                    <div className=\"flex gap-2\">\n                      {yamlOutput && (\n                        <>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => copyToClipboard(yamlOutput, \"YAML\")}\n                            data-testid=\"button-copy-yaml\"\n                          >\n                            <Copy className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={downloadYaml}\n                            data-testid=\"button-download-yaml\"\n                          >\n                            Download\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"bg-gray-50 p-4 rounded border min-h-[300px]\">\n                    <pre className=\"font-mono text-sm whitespace-pre-wrap\" data-testid=\"text-yaml-output\">\n                      {yamlOutput || \"YAML output will appear here...\"}\n                    </pre>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Format Guidelines</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 text-sm\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Case Formats</h4>\n              <ul className=\"space-y-1 text-gray-600\">\n                <li>• <strong>camelCase:</strong> JavaScript, Java variables</li>\n                <li>• <strong>PascalCase:</strong> Class names, components</li>\n                <li>• <strong>snake_case:</strong> Python, database fields</li>\n                <li>• <strong>kebab-case:</strong> URLs, CSS classes</li>\n                <li>• <strong>CONSTANT_CASE:</strong> Environment variables</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2\">Properties to YAML</h4>\n              <ul className=\"space-y-1 text-gray-600\">\n                <li>• Supports nested properties (dot notation)</li>\n                <li>• Automatically converts boolean values</li>\n                <li>• Converts numeric values when possible</li>\n                <li>• Preserves comments structure</li>\n                <li>• Handles complex configurations</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default TextConverters;","size_bytes":14920},"client/src/components/xml-tools.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Copy, Trash2, FileText, CheckCircle, AlertCircle, ArrowRight, ArrowLeft, AlignLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatXML, convertXMLToJSON, convertJSONToXML } from \"@/lib/formatters\";\n\nexport default function XmlTools() {\n  const [xmlInput, setXmlInput] = useState(`<users><user id=\"1\"><name>John Doe</name><email>john@example.com</email><age>30</age></user><user id=\"2\"><name>Jane Smith</name><email>jane@example.com</email><age>25</age></user></users>`);\n  const [xmlOutput, setXmlOutput] = useState(\"\");\n  const [xmlToJsonInput, setXmlToJsonInput] = useState(`<users>\n  <user id=\"1\">\n    <name>John Doe</name>\n    <email>john@example.com</email>\n  </user>\n</users>`);\n  const [jsonFromXmlOutput, setJsonFromXmlOutput] = useState(\"\");\n  const [isXmlValid, setIsXmlValid] = useState<boolean | null>(null);\n  \n  const { toast } = useToast();\n\n  const validateXmlMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", \"/api/validate/xml\", { content });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setIsXmlValid(data.valid);\n      if (data.valid) {\n        setXmlOutput(data.formatted);\n      } else {\n        setXmlOutput(`Error: ${data.error}`);\n      }\n    },\n    onError: (error) => {\n      setIsXmlValid(false);\n      setXmlOutput(`Error: ${error.message}`);\n    },\n  });\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Content copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Copy\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleFormatXML = () => {\n    if (!xmlInput.trim()) {\n      toast({\n        title: \"Empty Input\",\n        description: \"Please enter some XML to format\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      const formatted = formatXML(xmlInput);\n      setXmlOutput(formatted);\n      setIsXmlValid(true);\n      toast({\n        title: \"Success\",\n        description: \"XML formatted successfully\",\n      });\n    } catch (error) {\n      setXmlOutput(`Error: ${error instanceof Error ? error.message : \"Invalid XML\"}`);\n      setIsXmlValid(false);\n      toast({\n        title: \"Invalid XML\",\n        description: \"Cannot format invalid XML\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleValidateXML = () => {\n    if (!xmlInput.trim()) {\n      toast({\n        title: \"Empty Input\",\n        description: \"Please enter some XML to validate\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    validateXmlMutation.mutate(xmlInput);\n  };\n\n  const handleMinifyXML = () => {\n    try {\n      const minified = xmlInput.replace(/>\\s+</g, '><').trim();\n      setXmlOutput(minified);\n      setIsXmlValid(true);\n      toast({\n        title: \"Success\",\n        description: \"XML minified successfully\",\n      });\n    } catch (error) {\n      setXmlOutput(`Error: ${error instanceof Error ? error.message : \"Invalid XML\"}`);\n      setIsXmlValid(false);\n      toast({\n        title: \"Invalid XML\",\n        description: \"Cannot minify invalid XML\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleConvertXMLToJSON = () => {\n    if (!xmlToJsonInput.trim()) {\n      toast({\n        title: \"Empty Input\",\n        description: \"Please enter some XML to convert\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      const json = convertXMLToJSON(xmlToJsonInput);\n      setJsonFromXmlOutput(JSON.stringify(json, null, 2));\n      toast({\n        title: \"Success\",\n        description: \"XML converted to JSON successfully\",\n      });\n    } catch (error) {\n      setJsonFromXmlOutput(`Error: ${error instanceof Error ? error.message : \"Invalid XML\"}`);\n      toast({\n        title: \"Conversion Failed\",\n        description: \"Could not convert XML to JSON\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleConvertJSONToXML = () => {\n    if (!jsonFromXmlOutput.trim()) {\n      toast({\n        title: \"Empty Input\",\n        description: \"Please convert XML to JSON first or enter valid JSON\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    try {\n      const parsed = JSON.parse(jsonFromXmlOutput);\n      const xml = convertJSONToXML(parsed);\n      setXmlToJsonInput(xml);\n      toast({\n        title: \"Success\",\n        description: \"JSON converted to XML successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Conversion Failed\",\n        description: \"Could not convert JSON to XML\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const clearXML = () => {\n    setXmlInput(\"\");\n    setXmlOutput(\"\");\n    setIsXmlValid(null);\n  };\n\n  const pasteXML = async () => {\n    try {\n      const text = await navigator.clipboard.readText();\n      setXmlInput(text);\n      toast({\n        title: \"Pasted!\",\n        description: \"Content pasted from clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Paste\",\n        description: \"Could not paste from clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-semibold text-gray-900\">XML Tools</h2>\n\n      <Tabs defaultValue=\"formatter\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"formatter\" className=\"flex items-center space-x-2\" data-testid=\"tab-xml-formatter\">\n            <AlignLeft className=\"h-4 w-4\" />\n            <span>XML Formatter</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"converter\" className=\"flex items-center space-x-2\" data-testid=\"tab-xml-converter\">\n            <ArrowRight className=\"h-4 w-4\" />\n            <span>XML ↔ JSON</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* XML Formatter */}\n        <TabsContent value=\"formatter\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">Input XML</Label>\n                <div className=\"flex space-x-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={clearXML}\n                    data-testid=\"button-clear-xml\"\n                  >\n                    <Trash2 className=\"h-3 w-3 mr-1\" />\n                    Clear\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={pasteXML}\n                    data-testid=\"button-paste-xml\"\n                  >\n                    <FileText className=\"h-3 w-3 mr-1\" />\n                    Paste\n                  </Button>\n                </div>\n              </div>\n              \n              <Textarea\n                value={xmlInput}\n                onChange={(e) => setXmlInput(e.target.value)}\n                placeholder=\"Paste your XML here...\"\n                className=\"h-80 font-mono text-sm resize-none\"\n                data-testid=\"textarea-xml-input\"\n              />\n\n              <div className=\"flex space-x-2\">\n                <Button \n                  onClick={handleFormatXML}\n                  disabled={validateXmlMutation.isPending}\n                  className=\"flex-1 bg-primary hover:bg-primary-dark\"\n                  data-testid=\"button-format-xml\"\n                >\n                  <AlignLeft className=\"h-4 w-4 mr-2\" />\n                  Format\n                </Button>\n                <Button \n                  onClick={handleValidateXML}\n                  disabled={validateXmlMutation.isPending}\n                  variant=\"outline\"\n                  className=\"flex-1 border-success text-success hover:bg-success hover:text-white\"\n                  data-testid=\"button-validate-xml\"\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Validate\n                </Button>\n                <Button \n                  onClick={handleMinifyXML}\n                  disabled={validateXmlMutation.isPending}\n                  variant=\"outline\"\n                  className=\"flex-1 border-warning text-warning hover:bg-warning hover:text-white\"\n                  data-testid=\"button-minify-xml\"\n                >\n                  <i className=\"fas fa-compress mr-2\"></i>\n                  Minify\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">Formatted XML</Label>\n                <div className=\"flex items-center space-x-2\">\n                  {isXmlValid !== null && (\n                    <div className={`flex items-center text-sm ${isXmlValid ? 'text-success' : 'text-error'}`}>\n                      {isXmlValid ? (\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                      ) : (\n                        <AlertCircle className=\"h-4 w-4 mr-1\" />\n                      )}\n                      <span>{isXmlValid ? \"Valid XML\" : \"Invalid XML\"}</span>\n                    </div>\n                  )}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => copyToClipboard(xmlOutput)}\n                    disabled={!xmlOutput}\n                    data-testid=\"button-copy-xml\"\n                  >\n                    <Copy className=\"h-3 w-3 mr-1\" />\n                    Copy\n                  </Button>\n                </div>\n              </div>\n              \n              <pre className=\"w-full h-80 p-4 font-mono text-sm border border-gray-300 rounded-lg bg-gray-50 overflow-auto\">\n                <code data-testid=\"text-xml-output\">{xmlOutput || \"Formatted XML will appear here...\"}</code>\n              </pre>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* XML to JSON Converter */}\n        <TabsContent value=\"converter\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <Label className=\"text-sm font-medium text-gray-700\">XML Input</Label>\n              <Textarea\n                value={xmlToJsonInput}\n                onChange={(e) => setXmlToJsonInput(e.target.value)}\n                placeholder=\"Paste XML to convert to JSON...\"\n                className=\"h-80 font-mono text-sm resize-none\"\n                data-testid=\"textarea-xml-to-json-input\"\n              />\n              <Button \n                onClick={handleConvertXMLToJSON}\n                className=\"w-full bg-primary hover:bg-primary-dark\"\n                data-testid=\"button-convert-xml-to-json\"\n              >\n                <ArrowRight className=\"h-4 w-4 mr-2\" />\n                Convert XML to JSON\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium text-gray-700\">JSON Output</Label>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => copyToClipboard(jsonFromXmlOutput)}\n                  disabled={!jsonFromXmlOutput}\n                  data-testid=\"button-copy-converted-json\"\n                >\n                  <Copy className=\"h-3 w-3 mr-1\" />\n                  Copy\n                </Button>\n              </div>\n              <pre className=\"w-full h-80 p-4 font-mono text-sm border border-gray-300 rounded-lg bg-gray-50 overflow-auto\">\n                <code data-testid=\"text-json-from-xml-output\">{jsonFromXmlOutput || \"JSON output will appear here...\"}</code>\n              </pre>\n              <Button \n                onClick={handleConvertJSONToXML}\n                variant=\"outline\"\n                className=\"w-full border-secondary text-secondary hover:bg-secondary hover:text-white\"\n                data-testid=\"button-convert-json-to-xml\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Convert JSON to XML\n              </Button>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":12977},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/crypto-api.ts":{"content":"interface CryptoConversionResponse {\n  from: string;\n  to: string;\n  amount: number;\n  rate: number;\n  convertedAmount: number;\n  marketData?: {\n    marketCap?: number;\n    change24h?: number;\n    volume24h?: number;\n  };\n  lastUpdated: string;\n}\n\ninterface CryptoApiError {\n  message: string;\n  code?: string;\n}\n\nexport const convertCrypto = async (\n  from: string,\n  to: string,\n  amount: number\n): Promise<CryptoConversionResponse> => {\n  try {\n    const response = await fetch(\n      `/api/crypto/convert?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}&amount=${amount}`\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.message || `HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('Unknown error occurred during crypto conversion');\n  }\n};\n\nexport const getSupportedCryptoCurrencies = () => {\n  return [\n    { id: 'bitcoin', name: 'Bitcoin', symbol: 'BTC' },\n    { id: 'ethereum', name: 'Ethereum', symbol: 'ETH' },\n    { id: 'cardano', name: 'Cardano', symbol: 'ADA' },\n    { id: 'polkadot', name: 'Polkadot', symbol: 'DOT' },\n    { id: 'chainlink', name: 'Chainlink', symbol: 'LINK' },\n    { id: 'litecoin', name: 'Litecoin', symbol: 'LTC' },\n    { id: 'stellar', name: 'Stellar', symbol: 'XLM' },\n    { id: 'dogecoin', name: 'Dogecoin', symbol: 'DOGE' },\n  ];\n};\n\nexport const getSupportedFiatCurrencies = () => {\n  return [\n    { id: 'usd', name: 'US Dollar', symbol: 'USD' },\n    { id: 'eur', name: 'Euro', symbol: 'EUR' },\n    { id: 'gbp', name: 'British Pound', symbol: 'GBP' },\n    { id: 'jpy', name: 'Japanese Yen', symbol: 'JPY' },\n    { id: 'cad', name: 'Canadian Dollar', symbol: 'CAD' },\n    { id: 'aud', name: 'Australian Dollar', symbol: 'AUD' },\n    { id: 'chf', name: 'Swiss Franc', symbol: 'CHF' },\n    { id: 'cny', name: 'Chinese Yuan', symbol: 'CNY' },\n  ];\n};\n\nexport const formatCryptoAmount = (amount: number, decimals: number = 8): string => {\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: decimals,\n  }).format(amount);\n};\n\nexport const formatFiatAmount = (amount: number, currency: string): string => {\n  try {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency.toUpperCase(),\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  } catch {\n    // Fallback for unsupported currencies\n    return `${amount.toFixed(2)} ${currency.toUpperCase()}`;\n  }\n};\n\nexport const calculatePercentageChange = (current: number, previous: number): number => {\n  if (previous === 0) return 0;\n  return ((current - previous) / previous) * 100;\n};\n\nexport const formatMarketCap = (marketCap: number): string => {\n  if (marketCap >= 1e12) {\n    return `$${(marketCap / 1e12).toFixed(2)}T`;\n  } else if (marketCap >= 1e9) {\n    return `$${(marketCap / 1e9).toFixed(2)}B`;\n  } else if (marketCap >= 1e6) {\n    return `$${(marketCap / 1e6).toFixed(2)}M`;\n  } else if (marketCap >= 1e3) {\n    return `$${(marketCap / 1e3).toFixed(2)}K`;\n  } else {\n    return `$${marketCap.toFixed(2)}`;\n  }\n};\n\nexport const formatVolume = (volume: number): string => {\n  return formatMarketCap(volume); // Same formatting logic\n};\n\nexport const isValidCryptoAmount = (amount: string | number): boolean => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return !isNaN(numAmount) && numAmount > 0 && isFinite(numAmount);\n};\n\nexport const getCryptoDisplayName = (currencyId: string): string => {\n  const crypto = getSupportedCryptoCurrencies().find(c => c.id === currencyId);\n  return crypto ? `${crypto.name} (${crypto.symbol})` : currencyId.toUpperCase();\n};\n\nexport const getFiatDisplayName = (currencyId: string): string => {\n  const fiat = getSupportedFiatCurrencies().find(c => c.id === currencyId);\n  return fiat ? `${fiat.name} (${fiat.symbol})` : currencyId.toUpperCase();\n};\n","size_bytes":4073},"client/src/lib/formatters.ts":{"content":"export const formatXML = (xml: string): string => {\n  try {\n    // Remove extra whitespace and normalize\n    const normalized = xml.replace(/>\\s+</g, '><').trim();\n    \n    let formatted = '';\n    let indent = 0;\n    const tab = '  ';\n    \n    // Split by tags\n    const tokens = normalized.split(/(<[^>]+>)/g).filter(token => token.trim());\n    \n    for (const token of tokens) {\n      if (token.startsWith('</')) {\n        // Closing tag\n        indent--;\n        formatted += '\\n' + tab.repeat(Math.max(0, indent)) + token;\n      } else if (token.startsWith('<') && token.endsWith('>')) {\n        if (token.includes('/>') || token.startsWith('<?') || token.startsWith('<!')) {\n          // Self-closing tag, processing instruction, or comment\n          formatted += '\\n' + tab.repeat(indent) + token;\n        } else {\n          // Opening tag\n          formatted += '\\n' + tab.repeat(indent) + token;\n          indent++;\n        }\n      } else if (token.trim()) {\n        // Text content\n        formatted += token.trim();\n      }\n    }\n    \n    return formatted.trim();\n  } catch (error) {\n    throw new Error(`XML formatting failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};\n\nexport const minifyXML = (xml: string): string => {\n  try {\n    return xml\n      .replace(/>\\s+</g, '><')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  } catch (error) {\n    throw new Error(`XML minification failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};\n\nexport const validateXML = (xml: string): { valid: boolean; error?: string } => {\n  try {\n    if (typeof DOMParser !== 'undefined') {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(xml, 'text/xml');\n      \n      const errors = doc.getElementsByTagName('parsererror');\n      if (errors.length > 0) {\n        return {\n          valid: false,\n          error: errors[0].textContent || 'XML parsing error'\n        };\n      }\n    }\n    \n    // Basic validation checks\n    const trimmed = xml.trim();\n    if (!trimmed.startsWith('<') || !trimmed.endsWith('>')) {\n      return {\n        valid: false,\n        error: 'XML must start with < and end with >'\n      };\n    }\n    \n    // Check for balanced tags (basic check)\n    const openTags = (trimmed.match(/<[^/][^>]*[^/]>/g) || []).length;\n    const closeTags = (trimmed.match(/<\\/[^>]+>/g) || []).length;\n    const selfClosing = (trimmed.match(/<[^>]+\\/>/g) || []).length;\n    \n    // This is a very basic check, more sophisticated validation would be needed\n    return { valid: true };\n  } catch (error) {\n    return {\n      valid: false,\n      error: error instanceof Error ? error.message : 'Unknown validation error'\n    };\n  }\n};\n\nexport const convertXMLToJSON = (xml: string): any => {\n  try {\n    if (typeof DOMParser === 'undefined') {\n      throw new Error('DOMParser is not available');\n    }\n    \n    const parser = new DOMParser();\n    const doc = parser.parseFromString(xml, 'text/xml');\n    \n    const errors = doc.getElementsByTagName('parsererror');\n    if (errors.length > 0) {\n      throw new Error('Invalid XML: ' + (errors[0].textContent || 'Parsing failed'));\n    }\n    \n    const xmlToObj = (node: Element): any => {\n      const result: any = {};\n      \n      // Handle attributes\n      if (node.attributes && node.attributes.length > 0) {\n        for (let i = 0; i < node.attributes.length; i++) {\n          const attr = node.attributes[i];\n          result[`@${attr.name}`] = attr.value;\n        }\n      }\n      \n      // Handle child nodes\n      const children: { [key: string]: any[] } = {};\n      let textContent = '';\n      \n      for (let i = 0; i < node.childNodes.length; i++) {\n        const child = node.childNodes[i];\n        \n        if (child.nodeType === Node.ELEMENT_NODE) {\n          const childElement = child as Element;\n          const childName = childElement.tagName;\n          \n          if (!children[childName]) {\n            children[childName] = [];\n          }\n          children[childName].push(xmlToObj(childElement));\n        } else if (child.nodeType === Node.TEXT_NODE) {\n          const text = child.textContent?.trim() || '';\n          if (text) {\n            textContent += text;\n          }\n        }\n      }\n      \n      // Process children\n      Object.keys(children).forEach(key => {\n        if (children[key].length === 1) {\n          result[key] = children[key][0];\n        } else {\n          result[key] = children[key];\n        }\n      });\n      \n      // Add text content if present and no child elements\n      if (textContent && Object.keys(children).length === 0) {\n        if (Object.keys(result).length === 0) {\n          return textContent;\n        } else {\n          result['#text'] = textContent;\n        }\n      }\n      \n      return result;\n    };\n    \n    const rootElement = doc.documentElement;\n    return {\n      [rootElement.tagName]: xmlToObj(rootElement)\n    };\n  } catch (error) {\n    throw new Error(`XML to JSON conversion failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};\n\nexport const convertJSONToXML = (json: any, rootName: string = 'root'): string => {\n  try {\n    const objToXml = (obj: any, name: string): string => {\n      if (obj === null || obj === undefined) {\n        return `<${name}></${name}>`;\n      }\n      \n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return `<${name}>${escapeXml(String(obj))}</${name}>`;\n      }\n      \n      if (Array.isArray(obj)) {\n        return obj.map(item => objToXml(item, name)).join('');\n      }\n      \n      if (typeof obj === 'object') {\n        let attributes = '';\n        let content = '';\n        \n        Object.keys(obj).forEach(key => {\n          if (key.startsWith('@')) {\n            // Attribute\n            const attrName = key.substring(1);\n            attributes += ` ${attrName}=\"${escapeXml(String(obj[key]))}\"`;\n          } else if (key === '#text') {\n            // Text content\n            content += escapeXml(String(obj[key]));\n          } else {\n            // Child element\n            content += objToXml(obj[key], key);\n          }\n        });\n        \n        if (content) {\n          return `<${name}${attributes}>${content}</${name}>`;\n        } else {\n          return `<${name}${attributes}/>`;\n        }\n      }\n      \n      return `<${name}>${escapeXml(String(obj))}</${name}>`;\n    };\n    \n    const escapeXml = (str: string): string => {\n      return str\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&apos;');\n    };\n    \n    if (typeof json === 'object' && json !== null) {\n      const keys = Object.keys(json);\n      if (keys.length === 1) {\n        return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n${objToXml(json[keys[0]], keys[0])}`;\n      }\n    }\n    \n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n${objToXml(json, rootName)}`;\n  } catch (error) {\n    throw new Error(`JSON to XML conversion failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};\n\nexport const formatJSON = (json: string): { formatted: string; minified: string; stats: any } => {\n  try {\n    const parsed = JSON.parse(json);\n    const formatted = JSON.stringify(parsed, null, 2);\n    const minified = JSON.stringify(parsed);\n    \n    const countObjects = (obj: any): number => {\n      if (typeof obj !== 'object' || obj === null) return 0;\n      if (Array.isArray(obj)) {\n        return obj.reduce((count: number, item: any) => count + countObjects(item), 0);\n      }\n      return 1 + Object.values(obj).reduce((count: number, value: any) => count + countObjects(value), 0);\n    };\n    \n    const countArrays = (obj: any): number => {\n      if (typeof obj !== 'object' || obj === null) return 0;\n      if (Array.isArray(obj)) {\n        return 1 + obj.reduce((count: number, item: any) => count + countArrays(item), 0);\n      }\n      return Object.values(obj).reduce((count: number, value: any) => count + countArrays(value), 0);\n    };\n    \n    const stats = {\n      size: Buffer.byteLength(json, 'utf8'),\n      lines: formatted.split('\\n').length,\n      objects: countObjects(parsed),\n      arrays: countArrays(parsed),\n    };\n    \n    return { formatted, minified, stats };\n  } catch (error) {\n    throw new Error(`JSON formatting failed: ${error instanceof Error ? error.message : 'Invalid JSON'}`);\n  }\n};\n\nexport const validateJSON = (json: string): { valid: boolean; error?: string } => {\n  try {\n    JSON.parse(json);\n    return { valid: true };\n  } catch (error) {\n    return {\n      valid: false,\n      error: error instanceof Error ? error.message : 'Invalid JSON'\n    };\n  }\n};\n","size_bytes":8719},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport JsonTools from \"@/components/json-tools\";\nimport Decoders from \"@/components/decoders\";\nimport XmlTools from \"@/components/xml-tools\";\nimport FileConverters from \"@/components/file-converters\";\nimport DuplicatesIdentifier from \"@/components/duplicates-identifier\";\nimport Base64Pdf from \"@/components/base64-pdf\";\nimport HashingTools from \"@/components/hashing-tools\";\nimport EncryptionTools from \"@/components/encryption-tools\";\nimport QRTools from \"@/components/qr-tools\";\nimport TextConverters from \"@/components/text-converters\";\nimport { Settings, HelpCircle, Wrench, Code, Unlock, FileCode, FileText, Search, Key, Hash, Lock, QrCode, Type } from \"lucide-react\";\n\nexport default function Home() {\n  const [selectedTool, setSelectedTool] = useState<string | null>(null);\n\n  const tools = [\n    {\n      id: \"json-tools\",\n      title: \"JSON Tools\",\n      description: \"Format, validate, and analyze JSON data with statistics\",\n      icon: Code,\n      color: \"bg-blue-500\",\n      component: <JsonTools />\n    },\n    {\n      id: \"decoders\",\n      title: \"Multiple Decoders\",\n      description: \"Decode URL, HTML entities, JWT tokens, Base64 and Base32 data\",\n      icon: Unlock,\n      color: \"bg-green-500\",\n      component: <Decoders />\n    },\n    {\n      id: \"hashing-tools\",\n      title: \"Hashing Tools\",\n      description: \"Generate secure hashes using MD5, SHA-256, SHA-512, and SHA-3\",\n      icon: Hash,\n      color: \"bg-indigo-500\",\n      component: <HashingTools />\n    },\n    {\n      id: \"encryption-tools\",\n      title: \"Encryption Tools\",\n      description: \"Encrypt and decrypt text using various algorithms and ciphers\",\n      icon: Lock,\n      color: \"bg-pink-500\",\n      component: <EncryptionTools />\n    },\n    {\n      id: \"qr-tools\",\n      title: \"QR Code Tools\",\n      description: \"Generate QR codes from text and scan existing QR codes\",\n      icon: QrCode,\n      color: \"bg-teal-500\",\n      component: <QRTools />\n    },\n    {\n      id: \"text-converters\",\n      title: \"Text Converters\",\n      description: \"Convert text cases and transform properties files to YAML\",\n      icon: Type,\n      color: \"bg-cyan-500\",\n      component: <TextConverters />\n    },\n    {\n      id: \"xml-tools\",\n      title: \"XML Tools\",\n      description: \"Format XML and convert between XML and JSON formats\",\n      icon: FileCode,\n      color: \"bg-purple-500\",\n      component: <XmlTools />\n    },\n    {\n      id: \"file-converters\",\n      title: \"File Converters\",\n      description: \"Convert PDF and DOCX files to text format\",\n      icon: FileText,\n      color: \"bg-orange-500\",\n      component: <FileConverters />\n    },\n    {\n      id: \"duplicates\",\n      title: \"Duplicate Identifier\",\n      description: \"Find and remove duplicate entries in JSON and XML data\",\n      icon: Search,\n      color: \"bg-yellow-500\",\n      component: <DuplicatesIdentifier />\n    },\n    {\n      id: \"base64-pdf\",\n      title: \"Base64 PDF Tools\",\n      description: \"Encode PDF files to Base64 and decode Base64 back to PDF\",\n      icon: Key,\n      color: \"bg-red-500\",\n      component: <Base64Pdf />\n    }\n  ];\n\n  if (selectedTool) {\n    const tool = tools.find(t => t.id === selectedTool);\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {/* Header */}\n        <header className=\"bg-surface shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setSelectedTool(null)}\n                  className=\"mr-2\"\n                  data-testid=\"button-back-to-tools\"\n                >\n                  ← Back to Tools\n                </Button>\n                <div className={`${tool?.color} p-2 rounded-lg`}>\n                  {tool?.icon && <tool.icon className=\"h-6 w-6 text-white\" />}\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-semibold text-gray-900\">{tool?.title}</h1>\n                  <p className=\"text-sm text-gray-500\">{tool?.description}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <button \n                  className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n                  data-testid=\"button-help\"\n                >\n                  <HelpCircle className=\"h-5 w-5\" />\n                </button>\n                <button \n                  className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n                  data-testid=\"button-settings\"\n                >\n                  <Settings className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"bg-surface rounded-lg shadow-sm border border-gray-200 p-6\">\n            {tool?.component}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-primary p-2 rounded-lg\">\n                <Wrench className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">Developer Toolkit</h1>\n                <p className=\"text-sm text-gray-500\">Converters, Formatters & Validators</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button \n                className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n                data-testid=\"button-help\"\n              >\n                <HelpCircle className=\"h-5 w-5\" />\n              </button>\n              <button \n                className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n                data-testid=\"button-settings\"\n              >\n                <Settings className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Choose Your Tool</h2>\n          <p className=\"text-lg text-gray-600 max-w-3xl mx-auto\">\n            Comprehensive developer toolkit featuring cryptographic functions, data transformation, \n            file conversion, formatting, encoding/decoding, and validation tools.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-6\">\n          {tools.map((tool) => (\n            <Card \n              key={tool.id} \n              className=\"cursor-pointer transition-all duration-200 hover:shadow-lg hover:scale-105 border-2 hover:border-primary\"\n              onClick={() => setSelectedTool(tool.id)}\n              data-testid={`card-${tool.id}`}\n            >\n              <CardHeader className=\"text-center pb-4\">\n                <div className={`${tool.color} w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4`}>\n                  <tool.icon className=\"h-8 w-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                  {tool.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"text-gray-600 mb-4\">\n                  {tool.description}\n                </p>\n                <Button \n                  className=\"w-full bg-primary hover:bg-primary-dark\"\n                  data-testid={`button-open-${tool.id}`}\n                >\n                  Open Tool\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-12 text-center\">\n          <div className=\"bg-gray-50 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Need Help?</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Each tool includes built-in validation, error handling, and helpful feedback to guide you through the process.\n            </p>\n            <div className=\"flex flex-wrap justify-center gap-4 text-sm text-gray-500\">\n              <span>✓ Cryptographic security</span>\n              <span>✓ Real-time validation</span>\n              <span>✓ File processing</span>\n              <span>✓ Export capabilities</span>\n              <span>✓ Error recovery</span>\n              <span>✓ QR code generation</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9255},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}